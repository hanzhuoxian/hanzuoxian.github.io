<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>简介</title>
    <link href="/2024/04/28/docker/introduction/"/>
    <url>/2024/04/28/docker/introduction/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是-docker？"><a href="#什么是-docker？" class="headerlink" title="什么是 docker？"></a>什么是 docker？</h2><p>Docker 是一个允许用户在任何地方构建、分发及运行任何应用的平台。是一个开源的应用容器引擎。</p><h3 id="LXC-是什么？"><a href="#LXC-是什么？" class="headerlink" title="LXC 是什么？"></a>LXC 是什么？</h3><p>LXC 为 Linux Container 的简写，可以提供轻量级的虚拟化，以便隔离进程和资源，而不需要提供指令解释机制以及全虚拟化的其他复杂性。</p><h3 id="LXC-与-docker-是什么关系？"><a href="#LXC-与-docker-是什么关系？" class="headerlink" title="LXC 与 docker 是什么关系？"></a>LXC 与 docker 是什么关系？</h3><p>docker 底层使用了 LXC 来实现，LXC 将 linux 进程沙盒化，使得进程之间互相隔离，并且能够控制各进程的资源分配。</p><h3 id="Docker-的好处"><a href="#Docker-的好处" class="headerlink" title="Docker 的好处"></a>Docker 的好处</h3><ol><li>替代虚拟机</li><li>软件原型</li><li>打包软件</li><li>让微服务架构成为可能</li><li>网络建模</li><li>离线时启用全栈生产力</li><li>降低调试支出</li><li>文档化软件依赖及接触点</li><li>启用持续交付</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指针</title>
    <link href="/2024/03/15/golang/pointer/"/>
    <url>/2024/03/15/golang/pointer/</url>
    
    <content type="html"><![CDATA[<h2 id="指针概念"><a href="#指针概念" class="headerlink" title="指针概念"></a>指针概念</h2><p>一个变量对应一个保存了变量对应类型值的内存空间。普通变量在声明语句创建时被绑定到一个变量名。比如叫 <code>x</code> 的变量，但是还有很多变量始终以表达式方式引入 例如 <code>x[i]</code> 或 <code>x.f</code>。所有这些表达式一般都是读取一个变量的值，除非他们是出现在赋值语句的左边，这时候是给对应变量赋予一个新的值。</p><p>一个指针的值是另一个变量的地址，一个指针对应变量在内存中的存储位置。通过指针我们可以直接读取或更新该变量的值，而不需知道该变量的名字（如果变量有名字的话）。</p><p>如果用 <code>var x int</code> 声明语句声明一个 <code>x</code> 变量，那么 <code>&amp;x</code> 表达式（取x变量的内存地址）将产生一个指向该整数变量的指针，指针对应的数据类型是 <code>*int</code>，指针被称之为“指向int类型的指针”。如果指针名字为 <code>p</code>，那么可以说“ <code>p</code> 指针指向变量 <code>x</code> ”，或者说“ <code>p</code> 指针保存了 <code>x</code> 变量的内存地址”。同时 <code>*p</code> 表达式对应 <code>p</code> 指针指向的变量的值。一般 <code>*p</code> 表达式读取指针指向的变量的值，这里为 <code>int</code> 类型的值，同时因为 <code>*p</code> 对应一个变量，所以该表达式也可以出现在赋值语句的左边，表示更新指针所指向的变量的值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">x := <span class="hljs-number">1</span><br>p := &amp;x         <span class="hljs-comment">// p 的类型为 *int 指向变量 x</span><br>fmt.Println(*p) <span class="hljs-comment">// 1</span><br><br>*p = <span class="hljs-number">2</span>         <span class="hljs-comment">// 与 x = 2 等价</span><br>fmt.Println(x) <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>对于聚合类型的每个成员，比如结构的每个字段或者数组的每个元素也都是对应一个变量，因此可以被取值。</p><h2 id="指针零值"><a href="#指针零值" class="headerlink" title="指针零值"></a>指针零值</h2><p>任何类型的指针的零值都是 <code>nil</code>，如果 <code>p != nil</code> 测试成立，那么 <code>p</code> 指向某个有效变量。在使用指针时必须判断不是空指针否则会产生运行时 panic。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> p1 *<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> p2 *<span class="hljs-type">int</span><br>fmt.Println(*p1 + *p2)                  <span class="hljs-comment">// panic: runtime error: invalid memory address or nil pointer dereference</span><br></code></pre></td></tr></table></figure><h2 id="指针比较"><a href="#指针比较" class="headerlink" title="指针比较"></a>指针比较</h2><p>指针都为 <code>nil</code> 或者他们指向相同的变量时这两个指针相等。类型不同的指针不能比较，会报编译错误。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 相等比较</span><br><span class="hljs-keyword">var</span> p1 *<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> p2 *<span class="hljs-type">int</span><br><span class="hljs-comment">// var p3 *float32</span><br><br>fmt.Println(p1, p2, &amp;p1, &amp;p2, p1 == p2) <span class="hljs-comment">// &lt;nil&gt; &lt;nil&gt; 0xc000058028 0xc000058030 true</span><br><br><span class="hljs-comment">// fmt.Println(p1 == p3) // invalid operation: p1 == p3 (mismatched types *int and *float32)</span><br>x = <span class="hljs-number">1</span><br>p1 = &amp;x<br>p2 = &amp;x<br>fmt.Println(p1, p2, &amp;p1, &amp;p2, p1 == p2) <span class="hljs-comment">// 0xc0000120d0 0xc0000120d0 0xc000058028 0xc000058030 true</span><br><br></code></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>在 Go 语言中，返回函数中局部变量的地址是安全的，调用函数 <code>f</code> 时创建局部变量 v，在局部变量地址被返回后仍然有效，因为指针 <code>p</code> 仍然使用这个变量，变量逃逸出函数 <code>f</code> 的作用域。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> p = f()<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span> *<span class="hljs-type">int</span> &#123;<br>    v := <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> &amp;v<br>&#125;<br><br><br>fmt.Println(f() == f())<br></code></pre></td></tr></table></figure><h2 id="指针在-flag-包中的应用"><a href="#指针在-flag-包中的应用" class="headerlink" title="指针在 flag 包中的应用"></a>指针在 flag 包中的应用</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> n = flag.Bool(<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;omit trailing newline&quot;</span>)<br><br><span class="hljs-comment">// 新建 bool 类型变量并将指针返回</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *FlagSet)</span></span> Bool(name <span class="hljs-type">string</span>, value <span class="hljs-type">bool</span>, usage <span class="hljs-type">string</span>) *<span class="hljs-type">bool</span> &#123;<br>    p := <span class="hljs-built_in">new</span>(<span class="hljs-type">bool</span>)<br>    f.BoolVar(p, name, value, usage)<br>    <span class="hljs-keyword">return</span> p<br>&#125;<br></code></pre></td></tr></table></figure><p><code>flag.Bool</code> 使用 <code>new</code> 创建变量并将变量地址返回</p>]]></content>
    
    
    <categories>
      
      <category>Go 学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>for循环</title>
    <link href="/2024/02/19/bash/for/"/>
    <url>/2024/02/19/bash/for/</url>
    
    <content type="html"><![CDATA[<h2 id="C-语言语法-for-循环"><a href="#C-语言语法-for-循环" class="headerlink" title="C 语言语法 for 循环"></a>C 语言语法 for 循环</h2><h3 id="语法解释"><a href="#语法解释" class="headerlink" title="语法解释"></a>语法解释</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># do 与 for 不在一行的写法</span><br><span class="hljs-keyword">for</span> (( expression1; expression2; expression3 ))<br><span class="hljs-keyword">do</span><br>  commands<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># do 与 for 在一行的写法</span><br><span class="hljs-keyword">for</span> (( expression1; expression2; expression3 )); <span class="hljs-keyword">do</span><br>  commands<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><code>expression1</code> 用来初始化循环条件，<code>expression2</code> 用来决定循环结束的条件，<code>expression3</code> 在每次循环迭代的末尾执行，用于更新值。</p><p>循环条件放在双重圆括号之中，变量不需要加美元符号 <code>$</code></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># do 与 for 不在一行的写法</span><br><span class="hljs-keyword">for</span> ((i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++))<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># do 与 for 在一行的写法</span><br><span class="hljs-keyword">for</span> ((i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)); <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">declare</span> -a arr=(<span class="hljs-string">&quot;element1&quot;</span> <span class="hljs-string">&quot;element2&quot;</span> <span class="hljs-string">&quot;element3&quot;</span>)<br>len=<span class="hljs-variable">$&#123;#arr[@]&#125;</span><br><span class="hljs-keyword">for</span> ((i=<span class="hljs-number">0</span>;i &lt; &quot;<span class="hljs-variable">$&#123;len&#125;</span>&quot;; i++)) ;<span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;arr[$i]&#125;</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="for-in-循环"><a href="#for-in-循环" class="headerlink" title="for...in 循环"></a><code>for...in</code> 循环</h2><h3 id="for-in-语法解释"><a href="#for-in-语法解释" class="headerlink" title="for...in 语法解释"></a><code>for...in</code> 语法解释</h3><p>for…in 循环用于遍历列表的每一项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># for 与 do 不在一行的写法</span><br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> list<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">command</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># for 与 do 在一行的写法</span><br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> list;<span class="hljs-keyword">do</span><br><span class="hljs-built_in">command</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>上面的语法中，<code>for</code> 会依次从 <code>list</code> 中取出一项作为变量 <code>var</code> 的值，然后在循环体中进行处理</p><h3 id="for-in-例子"><a href="#for-in-例子" class="headerlink" title="for...in 例子"></a><code>for...in</code> 例子</h3><h4 id="数组例子"><a href="#数组例子" class="headerlink" title="数组例子"></a>数组例子</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> 1 2 3<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="列表可以由通配符产生"><a href="#列表可以由通配符产生" class="headerlink" title="列表可以由通配符产生"></a>列表可以由通配符产生</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> conf <span class="hljs-keyword">in</span> /etc/*conf;<span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$conf</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="in-list-省略的情况"><a href="#in-list-省略的情况" class="headerlink" title="in list 省略的情况"></a>in list 省略的情况</h4><p>脚本参数或者函数参数 in $@ 可以省略</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-function"><span class="hljs-title">forignoreinlist</span></span>() &#123;<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>;<span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$i</span>&quot;</span><br>    <span class="hljs-keyword">done</span><br>    <span class="hljs-comment"># 省略 in list</span><br>    <span class="hljs-keyword">for</span> i;<span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$i</span>&quot;</span><br>    <span class="hljs-keyword">done</span><br>&#125;<br><br>forignoreinlist a b c d<br></code></pre></td></tr></table></figure><h4 id="遍历数组元素"><a href="#遍历数组元素" class="headerlink" title="遍历数组元素"></a>遍历数组元素</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">declare</span> -a arr=(<span class="hljs-string">&quot;element1&quot;</span> <span class="hljs-string">&quot;element2&quot;</span> <span class="hljs-string">&quot;element3&quot;</span>)<br><span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;arr[@]&#125;</span>&quot;</span>;<span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$element</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Go语言目录规范</title>
    <link href="/2024/01/05/blog/go_dir/"/>
    <url>/2024/01/05/blog/go_dir/</url>
    
    <content type="html"><![CDATA[<pre><code class=" mermaid">mindmap  root)Go 语言目录结构规范(    平铺式目录结构        概念：平铺方式就是在项目的根目录下存放项目的代码        使用场景            代码框架            库    结构化目录结构        参考：https://github.com/golang-standards/project-layout</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>目录规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码提交规范</title>
    <link href="/2024/01/02/blog/git_commit/"/>
    <url>/2024/01/02/blog/git_commit/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是-Commit-Message"><a href="#什么是-Commit-Message" class="headerlink" title="什么是 Commit Message"></a>什么是 Commit Message</h2><p>我们在做代码开发时经常需要提交代码，比如 <code>git commit -m &#39;feat: 增加登录功能&#39;</code>，<code>-m</code> 后面的就是 Commit Message。用来说明提交内容。</p><h2 id="规范化-Commit-Message-的作用"><a href="#规范化-Commit-Message-的作用" class="headerlink" title="规范化 Commit Message 的作用"></a>规范化 Commit Message 的作用</h2><ul><li>清晰的知道每个 commit 的变更内容</li><li>基于 Commit Message 进行过滤查找</li><li>基于 Commit Message 生成 Change Log</li><li>依据某些类型的 Commit Message 触发构建流程</li><li>确定语义化版本的版本号</li></ul><h2 id="Commit-Message-的规范有哪些？"><a href="#Commit-Message-的规范有哪些？" class="headerlink" title="Commit Message 的规范有哪些？"></a>Commit Message 的规范有哪些？</h2><p>jQuery<br>JSHint<br>Ember<br>AngularJS-Karma<br>AngularJS-Angular</p><h3 id="Angular-规范的结构"><a href="#Angular-规范的结构" class="headerlink" title="Angular 规范的结构"></a>Angular 规范的结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs git">&lt;type&gt;[optional scope]: &lt;description&gt;<br>// 空行<br>[optional body]<br>// 空行<br>[optional footer(s)]<br></code></pre></td></tr></table></figure><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><h4 id="type-类型"><a href="#type-类型" class="headerlink" title="type 类型"></a>type 类型</h4><pre><code class=" mermaid">mindmap  root)type 类型(    代码类      新增功能（feat）      修复缺陷（fix）      性能优化（pref）      格式化代码（style）      优化代码（refactor）    非代码类      更新测试代码（test）      部署相关变更（ci）      文档类型变更（docs）      其他变更（chore）</code></pre><h4 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h4><p>scope 是用来说明影响范围的，必须是名词。</p><h4 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h4><p>subject 是 commit 的简短描述，必须以动词开头、使用现在时。</p><h3 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h3><p>描述具体做了哪些变更，修改动机，与上一版本相比的改动点。</p><h3 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h3><p>主要用来说明本次 commit 导致的后果。</p><h4 id="不兼容的改动"><a href="#不兼容的改动" class="headerlink" title="不兼容的改动"></a>不兼容的改动</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">BREAKING CHANGE: &lt;breaking change summary&gt;<br><span class="hljs-regexp">//</span> 空行<br>&lt;breaking change description + migration instructions&gt;<br><span class="hljs-regexp">//</span> 空行<br><span class="hljs-regexp">//</span> 空行<br>Fixes <span class="hljs-comment">#&lt;issue number&gt;</span><br></code></pre></td></tr></table></figure><h4 id="关闭-Issue"><a href="#关闭-Issue" class="headerlink" title="关闭 Issue"></a>关闭 Issue</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Change pause <span class="hljs-built_in">version</span> <span class="hljs-built_in">value</span> <span class="hljs-built_in">to</span> <span class="hljs-keyword">a</span> <span class="hljs-built_in">constant</span> <span class="hljs-keyword">for</span> image<br>   <br>   Closes <span class="hljs-comment">#1137</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>git commit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作流设计</title>
    <link href="/2024/01/02/blog/git_flow/"/>
    <url>/2024/01/02/blog/git_flow/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是工作流"><a href="#什么是工作流" class="headerlink" title="什么是工作流"></a>什么是工作流</h2><h2 id="集中式工作流"><a href="#集中式工作流" class="headerlink" title="集中式工作流"></a>集中式工作流</h2><p>定义：都使用 master 分支或者特定的某一分支进行开发。<br>适用场景：团队人数少、开发不频繁、不需要同时维护多个版本的小项目。</p><h2 id="功能分支工作流"><a href="#功能分支工作流" class="headerlink" title="功能分支工作流"></a>功能分支工作流</h2><p>定义：开发新功能时基于 master 新建一个分支，在新分支上开发测试，测试完成之后合并回 master 分支。最后的合并不能直接合并需要提 Pull Request。<br>适用场景：开发团队相对固定，规模较小的项目中。</p><h2 id="Git-Flow-工作流"><a href="#Git-Flow-工作流" class="headerlink" title="Git Flow 工作流"></a>Git Flow 工作流</h2><p>定义：Git Flow 中定义了 5 种分支，分别是 master、develop、feature、release 和 hotfix，其中 master 和 develop 为常驻分支，不同研发阶段回用到不同的分支。</p><table><thead><tr><th>分支</th><th>描述</th></tr></thead><tbody><tr><td>master</td><td>该分支上的最新代码永远是发布状态，不能直接在该分支上开发。master 每合并一个 hotfix&#x2F;release 都会打上版本标签</td></tr><tr><td>develop</td><td>该分支上的代码是开发中的最新版本，该分支只做合并操作，不能直接在该分支上开发</td></tr><tr><td>feature</td><td>在研发阶段用来做功能开发，一个新功能会基于 develop 创建一个 feature 分支。功能开发完成后合并到 develop 分支并删除 feature 分支</td></tr><tr><td>release</td><td>在发布阶段用作版本发布的预发布分支，基于 develop 分支创建，分支名建议命名为 release&#x2F;xxx-xxx 测试后合并回 master 和 develop</td></tr><tr><td>hotfix</td><td>在维护阶段用来做 bug 修复</td></tr><tr><td>适用场景：开发团队相对固定，项目较大的项目</td><td></td></tr></tbody></table><h2 id="Git-Forking-工作流"><a href="#Git-Forking-工作流" class="headerlink" title="Git Forking 工作流"></a>Git Forking 工作流</h2><p>定义：fork 仓库到自己账号下，功能分支开发，推入自己仓库远端分支，对源仓库提交 PR。<br>适用场景：开源项目、开发者有衍生版本的需求、开发人员可能是可以访问到项目的任何人。</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>git flow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>研发流程设计</title>
    <link href="/2024/01/02/blog/rd_flow/"/>
    <url>/2024/01/02/blog/rd_flow/</url>
    
    <content type="html"><![CDATA[<h2 id="需求阶段"><a href="#需求阶段" class="headerlink" title="需求阶段"></a>需求阶段</h2><h3 id="市场调研"><a href="#市场调研" class="headerlink" title="市场调研"></a>市场调研</h3><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><h3 id="需求文档"><a href="#需求文档" class="headerlink" title="需求文档"></a>需求文档</h3><h3 id="需求评审"><a href="#需求评审" class="headerlink" title="需求评审"></a>需求评审</h3><h2 id="设计阶段"><a href="#设计阶段" class="headerlink" title="设计阶段"></a>设计阶段</h2><h3 id="产品设计"><a href="#产品设计" class="headerlink" title="产品设计"></a>产品设计</h3><h3 id="交互设计"><a href="#交互设计" class="headerlink" title="交互设计"></a>交互设计</h3><h3 id="视觉设计"><a href="#视觉设计" class="headerlink" title="视觉设计"></a>视觉设计</h3><h3 id="技术设计"><a href="#技术设计" class="headerlink" title="技术设计"></a>技术设计</h3><p>对于后端开发人员，这设计技术方案之前，要做好充足的调研。一个技术方案，不仅要调研业界优秀的视线，还要了解友商相同技术的实现。只有这样，才可以确保我们的技术用最佳的方式实现。</p><h3 id="技术评审"><a href="#技术评审" class="headerlink" title="技术评审"></a>技术评审</h3><h3 id="需求排期"><a href="#需求排期" class="headerlink" title="需求排期"></a>需求排期</h3><h2 id="开发阶段"><a href="#开发阶段" class="headerlink" title="开发阶段"></a>开发阶段</h2><h3 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h3><h3 id="版权检查"><a href="#版权检查" class="headerlink" title="版权检查"></a>版权检查</h3><h3 id="静态代码检查"><a href="#静态代码检查" class="headerlink" title="静态代码检查"></a>静态代码检查</h3><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><h3 id="自测"><a href="#自测" class="headerlink" title="自测"></a>自测</h3><h3 id="Code-Review"><a href="#Code-Review" class="headerlink" title="Code Review"></a>Code Review</h3><h3 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h3><h2 id="构建（CI）"><a href="#构建（CI）" class="headerlink" title="构建（CI）"></a>构建（CI）</h2><h3 id="代码扫描"><a href="#代码扫描" class="headerlink" title="代码扫描"></a>代码扫描</h3><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><h3 id="编译打包"><a href="#编译打包" class="headerlink" title="编译打包"></a>编译打包</h3><h3 id="归档（镜像仓库、制品库）"><a href="#归档（镜像仓库、制品库）" class="headerlink" title="归档（镜像仓库、制品库）"></a>归档（镜像仓库、制品库）</h3><h2 id="发布阶段"><a href="#发布阶段" class="headerlink" title="发布阶段"></a>发布阶段</h2><h3 id="代码发布"><a href="#代码发布" class="headerlink" title="代码发布"></a>代码发布</h3><h4 id="合并到主干"><a href="#合并到主干" class="headerlink" title="合并到主干"></a>合并到主干</h4><h4 id="生成版本号"><a href="#生成版本号" class="headerlink" title="生成版本号"></a>生成版本号</h4><h4 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h4><h4 id="代码扫描-1"><a href="#代码扫描-1" class="headerlink" title="代码扫描"></a>代码扫描</h4><h4 id="单元测试-2"><a href="#单元测试-2" class="headerlink" title="单元测试"></a>单元测试</h4><h4 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h4><h4 id="发布构建产物"><a href="#发布构建产物" class="headerlink" title="发布构建产物"></a>发布构建产物</h4><h3 id="发布审批"><a href="#发布审批" class="headerlink" title="发布审批"></a>发布审批</h3><h4 id="资源申请"><a href="#资源申请" class="headerlink" title="资源申请"></a>资源申请</h4><h4 id="创建发布计划"><a href="#创建发布计划" class="headerlink" title="创建发布计划"></a>创建发布计划</h4><h4 id="创建发布单"><a href="#创建发布单" class="headerlink" title="创建发布单"></a>创建发布单</h4><h4 id="发布单审批"><a href="#发布单审批" class="headerlink" title="发布单审批"></a>发布单审批</h4><h3 id="服务发布"><a href="#服务发布" class="headerlink" title="服务发布"></a>服务发布</h3><h4 id="预发部署"><a href="#预发部署" class="headerlink" title="预发部署"></a>预发部署</h4><h4 id="预发验证"><a href="#预发验证" class="headerlink" title="预发验证"></a>预发验证</h4><h4 id="现网部署"><a href="#现网部署" class="headerlink" title="现网部署"></a>现网部署</h4><h4 id="现网验证"><a href="#现网验证" class="headerlink" title="现网验证"></a>现网验证</h4><h2 id="运营阶段"><a href="#运营阶段" class="headerlink" title="运营阶段"></a>运营阶段</h2><h3 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h3><h4 id="运维工具"><a href="#运维工具" class="headerlink" title="运维工具"></a>运维工具</h4><h4 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h4><h4 id="监控告警"><a href="#监控告警" class="headerlink" title="监控告警"></a>监控告警</h4><h4 id="高效运维"><a href="#高效运维" class="headerlink" title="高效运维"></a>高效运维</h4><h3 id="运营"><a href="#运营" class="headerlink" title="运营"></a>运营</h3><h4 id="技术沙龙"><a href="#技术沙龙" class="headerlink" title="技术沙龙"></a>技术沙龙</h4><h4 id="技术推文"><a href="#技术推文" class="headerlink" title="技术推文"></a>技术推文</h4><h4 id="日活"><a href="#日活" class="headerlink" title="日活"></a>日活</h4><h4 id="月活"><a href="#月活" class="headerlink" title="月活"></a>月活</h4><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><h3 id="研发模式"><a href="#研发模式" class="headerlink" title="研发模式"></a>研发模式</h3><h4 id="瀑布模式"><a href="#瀑布模式" class="headerlink" title="瀑布模式"></a>瀑布模式</h4><h4 id="迭代模式"><a href="#迭代模式" class="headerlink" title="迭代模式"></a>迭代模式</h4><h4 id="敏捷模式"><a href="#敏捷模式" class="headerlink" title="敏捷模式"></a>敏捷模式</h4><h3 id="CI-x2F-CD"><a href="#CI-x2F-CD" class="headerlink" title="CI&#x2F;CD"></a>CI&#x2F;CD</h3><h3 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h3>]]></content>
    
    
    
    <tags>
      
      <tag>研发</tag>
      
      <tag>研发流程设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>变量</title>
    <link href="/2023/11/28/golang/var/"/>
    <url>/2023/11/28/golang/var/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h2><p>变量是指一个抽象的存储地址，它含有被称为一个值的某种已知或未知信息量，并且配对了关联的符号名称（变量名）。变量的主要作用是代表数据，让程序设计者在编写代码时无需关心具体的数值，只需要通过这个符号来操作数据。</p><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><p><code>var</code> 声明语句可以创建一个特定类型的变量。变量声明的一般语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> 变量名 类型 = 初始值<br></code></pre></td></tr></table></figure><p>类型或者初始值可以省略，如果只强调类型不关心初始值那么就省略初始值，Go 语言会使用零值初始化。如果有明确的初始值那么可以省略类型 Go 语言会自动推导变量类型</p><table><thead><tr><th>类型</th><th>零值</th></tr></thead><tbody><tr><td>数值类型</td><td>0</td></tr><tr><td>字符串</td><td>“”</td></tr><tr><td>布尔类型</td><td>false</td></tr><tr><td>接口</td><td>nil</td></tr><tr><td>引用类型（slice、map、chan、func）</td><td>nil</td></tr><tr><td>数组</td><td>对应类型的0值</td></tr><tr><td>结构体</td><td>结构体字段对应的0值</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> defaultInt <span class="hljs-type">int64</span><br><span class="hljs-keyword">var</span> defaultString <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> defaultBool <span class="hljs-type">bool</span><br><span class="hljs-keyword">var</span> defaultSlice []<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> defaultMap <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> defaultChan <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> defaultFunc <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">var</span> defaultInterface <span class="hljs-keyword">interface</span>&#123;&#125;<br><span class="hljs-keyword">var</span> defaultArray [<span class="hljs-number">3</span>]<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> defaultStruct <span class="hljs-keyword">struct</span>&#123; name <span class="hljs-type">string</span> &#125;<br>fmt.Println(defaultInt)<br>fmt.Println(defaultString)<br>fmt.Println(defaultBool)<br>fmt.Println(defaultSlice == <span class="hljs-literal">nil</span>)<br>fmt.Println(defaultMap == <span class="hljs-literal">nil</span>)<br>fmt.Println(defaultChan)<br>fmt.Println(defaultFunc)<br>fmt.Println(defaultInterface)<br>fmt.Println(defaultArray)<br>fmt.Println(defaultStruct)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">0<br><br><span class="hljs-literal">false</span><br><span class="hljs-literal">true</span><br>map[]<br>&lt;nil&gt;<br>&lt;nil&gt;<br>&lt;nil&gt;<br>[0 0 0]<br>&#123;&#125;<br></code></pre></td></tr></table></figure><p>可以声明一组变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> i, j, k <span class="hljs-type">int</span>                 <span class="hljs-comment">// int, int, int</span><br><span class="hljs-keyword">var</span> b, f, s = <span class="hljs-literal">true</span>, <span class="hljs-number">2.3</span>, <span class="hljs-string">&quot;four&quot;</span> <span class="hljs-comment">// bool, float64, string</span><br></code></pre></td></tr></table></figure><h2 id="简短变量声明"><a href="#简短变量声明" class="headerlink" title="简短变量声明"></a>简短变量声明</h2><p>在函数内部，有一种称为简短变量声明语句的形式可用于声明和初始化局部变量。它以 <code>name := value</code> 的形式声明变量，变量的类型根据表达式来自动推导。</p><p>简短变量的组声明</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">i, j := <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>声明和赋值的区别：声明会分配内存空间，赋值只是改变内存空间的值。</p><h2 id="new-函数"><a href="#new-函数" class="headerlink" title="new 函数"></a>new 函数</h2><p>另一个创建变量的方法是调用内建的<code>new</code>函数。表达式<code>new(T)</code>将创建一个<code>T</code>类型的匿名变量，初始化为<code>T</code>类型的零值，然后返回变量地址，返回的指针类型为<code>*T</code>。</p><h2 id="变量生命周期"><a href="#变量生命周期" class="headerlink" title="变量生命周期"></a>变量生命周期</h2><p>变量生命周期指的是变量在程序运行期间存在的有效时间段。对于包一级变量来说他们和程序的运行周期是一致的。对于局部变量来说，每次从创建一个变量的声明语句开始，直到不在引用这个变量为止，然后变量的存储空间可能会被回收。对于局部变量来说存在逃逸为全局变量。</p><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>一个声明语句将程序中的实体和一个名字关联，比如一个函数或一个变量。声明语句的作用域是指源代码中可以有效使用这个名字的范围。</p><p>不要将作用域和生命周期混为一谈。声明语句的作用域对应的是一个源代码的文本区域；它是一个编译时的属性。一个变量的生命周期是指程序运行时变量存在的有效时间段，在此时间区域内它可以被程序的其他部分引用；是一个运行时的概念。</p><p>句法块：由花括号包含的一些列语句，句法块内部声明的名字是无法被外部块访问的。<br>词法块：虽然没有括号包含，但是他们是一个声明群组。全局的源代码在一个全局词法块中。对于每个包，每个 for、if 和 switch 语句 也都有对应的词法块。每个 switch 和 select 的分支也有独立的词法块。</p>]]></content>
    
    
    <categories>
      
      <category>Go 学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命名</title>
    <link href="/2023/11/28/golang/name/"/>
    <url>/2023/11/28/golang/name/</url>
    
    <content type="html"><![CDATA[<h2 id="命名字符组成"><a href="#命名字符组成" class="headerlink" title="命名字符组成"></a>命名字符组成</h2><p>Go 语言中的函数名、变量名、常量名、类型名、语句标号和包名等所有的命名，都遵循一个简单的命名规则：一个名字必须以一个字母（Unicode字母）或下划线开头，后面可以跟任意数量的字母、数字或下划线。名字的长度没有限制，尽量使用短小的名字。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 正确示例</span><br>姓名 := <span class="hljs-string">&quot;娃哈哈&quot;</span><br>name := <span class="hljs-string">&quot;哇哈哈&quot;</span><br>_name := <span class="hljs-string">&quot;娃哈哈&quot;</span><br>_name1 := <span class="hljs-string">&quot;娃哈哈&quot;</span><br>_name姓名 := <span class="hljs-string">&quot;娃哈哈&quot;</span><br><br><span class="hljs-comment">// 错误示例</span><br><span class="hljs-number">1</span>name := <span class="hljs-string">&quot;娃哈哈&quot;</span><br></code></pre></td></tr></table></figure><h2 id="命名大小写敏感"><a href="#命名大小写敏感" class="headerlink" title="命名大小写敏感"></a>命名大小写敏感</h2><p>大写字母和小写字母是不同的：<code>heapSort</code>和<code>Heapsort</code>是两个不同的名字。</p><h2 id="关键字不能用于自定义名字"><a href="#关键字不能用于自定义名字" class="headerlink" title="关键字不能用于自定义名字"></a>关键字不能用于自定义名字</h2><p>关键字不能用于自定义的名字只能在特定的语法结构中使用，下面是所有关键字：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">break</span>      <span class="hljs-keyword">default</span>       <span class="hljs-function"><span class="hljs-keyword">func</span>     <span class="hljs-title">interface</span>   <span class="hljs-title">select</span></span><br><span class="hljs-keyword">case</span>       <span class="hljs-keyword">defer</span>         <span class="hljs-keyword">go</span>       <span class="hljs-keyword">map</span>         <span class="hljs-keyword">struct</span><br><span class="hljs-keyword">chan</span>       <span class="hljs-keyword">else</span>          <span class="hljs-keyword">goto</span>     <span class="hljs-keyword">package</span>     <span class="hljs-keyword">switch</span><br><span class="hljs-keyword">const</span>      <span class="hljs-keyword">fallthrough</span>   <span class="hljs-keyword">if</span>       <span class="hljs-keyword">range</span>       <span class="hljs-keyword">type</span><br><span class="hljs-keyword">continue</span>   <span class="hljs-keyword">for</span>           <span class="hljs-keyword">import</span>   <span class="hljs-keyword">return</span>      <span class="hljs-keyword">var</span><br></code></pre></td></tr></table></figure><h2 id="预定义名字可以使用，但不推荐"><a href="#预定义名字可以使用，但不推荐" class="headerlink" title="预定义名字可以使用，但不推荐"></a>预定义名字可以使用，但不推荐</h2><p>预定义的名字，包括内建常量、类型和函数；预定义名字可以重新使用，但是最好不要这么做。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// 内建常量</span><br><span class="hljs-literal">true</span> <span class="hljs-literal">false</span> <span class="hljs-literal">iota</span> <span class="hljs-literal">nil</span><br><br><span class="hljs-comment">// 内建类型</span><br><span class="hljs-type">int</span> <span class="hljs-type">int8</span> <span class="hljs-type">int16</span> <span class="hljs-type">int32</span> <span class="hljs-type">int64</span><br><span class="hljs-type">uint</span> <span class="hljs-type">uint8</span> <span class="hljs-type">uint16</span> <span class="hljs-type">uint32</span> <span class="hljs-type">uint64</span> <span class="hljs-type">uintptr</span><br><span class="hljs-type">float32</span> <span class="hljs-type">float64</span> <span class="hljs-type">complex128</span> <span class="hljs-type">complex64</span><br><span class="hljs-type">bool</span> <span class="hljs-type">byte</span> <span class="hljs-type">rune</span> <span class="hljs-type">string</span> <span class="hljs-type">error</span><br><br><span class="hljs-comment">// 内建函数</span><br><span class="hljs-built_in">make</span> <span class="hljs-built_in">len</span> <span class="hljs-built_in">cap</span> <span class="hljs-built_in">new</span> <span class="hljs-built_in">append</span> <span class="hljs-built_in">copy</span> <span class="hljs-built_in">close</span> <span class="hljs-built_in">delete</span><br><span class="hljs-built_in">complex</span> <span class="hljs-built_in">real</span> <span class="hljs-built_in">imag</span><br><span class="hljs-built_in">panic</span> <span class="hljs-built_in">recover</span><br></code></pre></td></tr></table></figure><h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p>如果名字是在函数内定义，那么只在函数内有效，如果是在函数外定义的，那么在当前包内的所有文件都可以访问。名字开头字母的大小写决定了在包外的可见性。如果一个名字是大写字母开头的那么就可以被外部的包访问。中文认为是小写字母，不能被导出</p><h2 id="使用驼峰命名"><a href="#使用驼峰命名" class="headerlink" title="使用驼峰命名"></a>使用驼峰命名</h2><p>当名字由几个单词组成时优先使用大小写分隔，而不是优先用下划线分隔。因此，在标准库有QuoteRuneToASCII和parseRequestLine这样的函数命名，但是一般不会用quote_rune_to_ASCII和parse_request_line这样的命名。而像ASCII和HTML这样的缩略词则避免使用大小写混合的写法，它们可能被称为htmlEscape、HTMLEscape或escapeHTML，但不会是escapeHtml。</p><h2 id="编程规范"><a href="#编程规范" class="headerlink" title="编程规范"></a>编程规范</h2><p><a href="https://github.com/xxjwxc/uber_go_guide_cn#%E9%A1%B6%E5%B1%82%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E">顶层变量声明</a><br><a href="https://github.com/xxjwxc/uber_go_guide_cn#%E6%9C%AC%E5%9C%B0%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E">本地变量声明</a><br><a href="https://github.com/xxjwxc/uber_go_guide_cn#%E5%87%BD%E6%95%B0%E5%90%8D">函数名</a><br><a href="https://github.com/xxjwxc/uber_go_guide_cn#%E9%94%99%E8%AF%AF%E5%91%BD%E5%90%8D">错误命名</a><br><a href="https://github.com/xxjwxc/uber_go_guide_cn#%E5%8C%85%E5%90%8D">包名</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/xxjwxc/uber_go_guide_cn">Uber Go 语言编码规范</a>，by Uber</p>]]></content>
    
    
    <categories>
      
      <category>Go 学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>命名</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自控力</title>
    <link href="/2023/10/31/notes/self_control/"/>
    <url>/2023/10/31/notes/self_control/</url>
    
    <content type="html"><![CDATA[<h2 id="图书信息"><a href="#图书信息" class="headerlink" title="图书信息"></a>图书信息</h2><table><thead><tr><th>书名</th><th>自控力法</th></tr></thead><tbody><tr><td>作者</td><td>【英】凯利麦格尼格尔</td></tr><tr><td>出版社</td><td>京东读书</td></tr><tr><td>阅读时间</td><td>2023-10-30 ~ 2023</td></tr></tbody></table><h2 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h2><blockquote><p>自控只是一时的行为，而力不从心和失控却是常态。</p></blockquote><p>一直以为是自己菜，自己自控力不行，其实自己碰到的问题有可能是共性问题，碰到问题需要去查找相关资料、去研究、去学习和去解决。而不是一味的内疚。<br>——-end——-</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读</tag>
      
      <tag>笔记</tag>
      
      <tag>自控力</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刘澜-《学习力 30 讲》</title>
    <link href="/2023/10/28/notes/learning_ability/"/>
    <url>/2023/10/28/notes/learning_ability/</url>
    
    <content type="html"><![CDATA[<h2 id="发刊词"><a href="#发刊词" class="headerlink" title="发刊词"></a>发刊词</h2><h3 id="有效学习的定义？"><a href="#有效学习的定义？" class="headerlink" title="有效学习的定义？"></a>有效学习的定义？</h3><ol><li>你通过学习形成对各种问题的参考答案。</li><li>你把这个参考答案应用到自己的工作和生活之中，对自己的人生产生了积极的改变。</li></ol><h3 id="学习力五项修炼"><a href="#学习力五项修炼" class="headerlink" title="学习力五项修炼"></a>学习力五项修炼</h3><h4 id="反学习"><a href="#反学习" class="headerlink" title="反学习"></a>反学习</h4><p>消除错误的知识，改掉错误的习惯。</p><h4 id="参考答案思维方式"><a href="#参考答案思维方式" class="headerlink" title="参考答案思维方式"></a>参考答案思维方式</h4><p>养成一种参考答案思维方式，把面对的所有知识都作为参考答案来学习。</p><h4 id="聚焦"><a href="#聚焦" class="headerlink" title="聚焦"></a>聚焦</h4><p>聚焦少数知识上，把它学透，变为本金，用来学习其它知识。</p><h4 id="模式化学习"><a href="#模式化学习" class="headerlink" title="模式化学习"></a>模式化学习</h4><p>学习事物的深层结构，也就是模式，不能只学习事物的表面也就是碎片。</p><h4 id="深层迁移"><a href="#深层迁移" class="headerlink" title="深层迁移"></a>深层迁移</h4><p>把一种情景中的知识应用到另一种情景之中。</p><h2 id="01-本质：学习力强的人是什么样的？"><a href="#01-本质：学习力强的人是什么样的？" class="headerlink" title="01 | 本质：学习力强的人是什么样的？"></a>01 | 本质：学习力强的人是什么样的？</h2><p>Q：你觉得学习力强的人是什么样的？他们有哪些特征值得你学习？</p><p>刘澜老师参考答案：投资型学习者是学习力强的人，他们在学习上有长度、有宽度、有温度还有力度。</p><p>A：学习力强的人学的快，用的好，能坚持学习。特征：按时学习、学习深度很深。</p><h3 id="四种学习者"><a href="#四种学习者" class="headerlink" title="四种学习者"></a>四种学习者</h3><ul><li>生产型学习者：把时间用来生产产品或者提供服务，在当下产生了社会价值。</li><li>消费型学习者：你消费了一个产品或服务，当下感到身心愉悦。</li><li>投资型学习者:把时间花在当下不一定产生价值，但是在将来可以持久产生价值的活动。</li><li>浪费型学习者：如果你既没有生产、也没有消费、也没有投资那就是浪费了。</li></ul><h3 id="投资型学习者的四大特征"><a href="#投资型学习者的四大特征" class="headerlink" title="投资型学习者的四大特征"></a>投资型学习者的四大特征</h3><ul><li>终身学习（有长度）</li><li>全身学习（有宽度）</li><li>学以致用（有温度）</li><li>有自己的方法论（有力度）</li></ul><h3 id="时间管理模型"><a href="#时间管理模型" class="headerlink" title="时间管理模型"></a>时间管理模型</h3><p>按时间的使用情况分为四种情况，分别是：投资、生产、消费、浪费。</p><h2 id="02-方法：如何提升你的学习力？"><a href="#02-方法：如何提升你的学习力？" class="headerlink" title="02 | 方法：如何提升你的学习力？"></a>02 | 方法：如何提升你的学习力？</h2><p>学习力强的人的学习方法共性为五项修炼：</p><ul><li>反学习：指的是把你已经学到的错误的东西给清除掉。这是一种减法式学习。</li><li>参考答案思维方式：就是说你不管学了什么，都要把他当做参考答案，而不是标准答案。</li><li>聚焦：学的少 学得深</li><li>模式化学习：学习事物的本质，而本质是隐藏在表面之下的，不是那么容易被发现的。</li><li>深层迁移：就是把一种情景中学到的知识用到另一种情景之中。</li></ul><h2 id="03-路标：为什么成年人首先要反学习？"><a href="#03-路标：为什么成年人首先要反学习？" class="headerlink" title="03 | 路标：为什么成年人首先要反学习？"></a>03 | 路标：为什么成年人首先要反学习？</h2><h3 id="反学习的概念"><a href="#反学习的概念" class="headerlink" title="反学习的概念"></a>反学习的概念</h3><p>低阶反学习：清除一个错误的知识点。<br>高阶反学习：它清除的不是一个知识点，而是一种心智模式，这种心智模式可能对很多知识点或者对你的很多行为产生影响。</p><blockquote><p>怎么才更有利于孩子的学习，是赞扬还是批评？更利于孩子的学习的，不是赞扬也不是批评，而是反馈。这不仅对孩子适用，对成年人也适用。批评和赞扬对你的学习都没有多大帮助。对你的学习有实质性帮助的，是反馈。这是学习科学家得出的结论。</p></blockquote><blockquote><p>批评是说你做的不好，赞扬是说你做的好，而反馈的核心是告诉你下一步该怎么做。不管你现在做的好还是不好，反馈让你知道怎么做可以做的更好，所以反馈对学习更有效。</p></blockquote><h3 id="10-个学习上的坏习惯"><a href="#10-个学习上的坏习惯" class="headerlink" title="10 个学习上的坏习惯"></a>10 个学习上的坏习惯</h3><ol><li>标准答案思维方式，总是在寻找标准答案而不是在探索自己的答案。</li><li>学习方式是被动式学习。</li><li>在学习上害怕出错，认为出错时学的不好的表现。</li><li>在学习上追求全面发展，弥补短板，而不是围绕自己的擅长学习。</li><li>缺乏对学习的规划，不擅长管理自己的学习。</li><li>习惯了一个人学习，很少跟其他人进行讨论式的学习。</li><li>期待老师或专家提供答案，而不是把老师或专家作为对话的伙伴。</li><li>主要是在碎片化学习，虽然读了一些书，听了一些课，但是没有能够在书与书之间、课与课之间建立联系。</li><li>学而不用，好像学了很多知识但是生活还是老样子。</li><li>注重结果而非过程。</li></ol><h2 id="04-核心：为什么重要的问题没有标准答案？"><a href="#04-核心：为什么重要的问题没有标准答案？" class="headerlink" title="04 | 核心：为什么重要的问题没有标准答案？"></a>04 | 核心：为什么重要的问题没有标准答案？</h2><h3 id="什么是标准答案思维方式？"><a href="#什么是标准答案思维方式？" class="headerlink" title="什么是标准答案思维方式？"></a>什么是标准答案思维方式？</h3><p>第一：认为所有问题都有标准答案。<br>第二：认为权威掌握了标准答案。<br>第三：认为学习的方法就是让掌握了标准答案的人告诉你。</p><h3 id="世界上有三种问题"><a href="#世界上有三种问题" class="headerlink" title="世界上有三种问题"></a>世界上有三种问题</h3><ol><li>有标准答案的问题。比如中国的首都是哪里？</li><li>属于个人偏好问题。比如红烧肉好不好吃？</li><li>那些重要的社会和个人问题。比如怎么样才能搞定一个大客户？</li></ol><p>第二种和第三种都没有唯一正确的答案。但是第二种问题的答案无所谓对错也无所谓好坏；而第三种问题的答案尽管没有对错之分，但是有好坏之分。</p><p>要准确识别这三类问题，”不要把那些重要的社会和个人问题，当做简单的个人偏好问题来回答；不要把重要的社会和个人问题当做没有标准答案的问题来回答“。</p><h3 id="擅长学习的民族"><a href="#擅长学习的民族" class="headerlink" title="擅长学习的民族"></a>擅长学习的民族</h3><p>犹太人：第一：对真实的提问，第二：对权威的挑战。</p><h3 id="带着怀疑学习"><a href="#带着怀疑学习" class="headerlink" title="带着怀疑学习"></a>带着怀疑学习</h3><p>带着怀疑学习培养起参考答案思维方式。</p><p>带着怀疑学习是会学习的人的共同特征。</p><h2 id="05-方法：如何用加法做减法"><a href="#05-方法：如何用加法做减法" class="headerlink" title="05 | 方法：如何用加法做减法"></a>05 | 方法：如何用加法做减法</h2><h3 id="全面发展，弥补短板"><a href="#全面发展，弥补短板" class="headerlink" title="全面发展，弥补短板"></a>全面发展，弥补短板</h3><blockquote><p>建立聚焦新习惯。不要追求全面发展，而是聚焦在学习少数知识上。</p></blockquote><p>不要求全面发展，要在自己擅长的方向做到专家。</p><h3 id="碎片化学习"><a href="#碎片化学习" class="headerlink" title="碎片化学习"></a>碎片化学习</h3><blockquote><p>建立模式化学习新习惯。不是学习一个个碎片，而是学习深层知识，也就是模式。</p></blockquote><p>学习一个一个知识点很难形成自己的理论体系，所以也不太好应用。</p><h3 id="学而不用"><a href="#学而不用" class="headerlink" title="学而不用"></a>学而不用</h3><blockquote><p>建立深层迁移新习惯。深层迁移就是对模式进行迁移，这样可以把知识运用到大不相同的情景之中。</p></blockquote><p>学习过程中要多问自己对我有什么用</p><h2 id="06-路标：如何建立参考答案思维方式？"><a href="#06-路标：如何建立参考答案思维方式？" class="headerlink" title="06 | 路标：如何建立参考答案思维方式？"></a>06 | 路标：如何建立参考答案思维方式？</h2><h3 id="什么是参考答案思维方式？"><a href="#什么是参考答案思维方式？" class="headerlink" title="什么是参考答案思维方式？"></a>什么是参考答案思维方式？</h3><p>学习的对象是参考答案，学习的方法是比较不同的参考答案，学习的目标是掌握优秀的参考答案，并且建构自己的参考答案。</p><h3 id="如何建立参考大难思维方式？"><a href="#如何建立参考大难思维方式？" class="headerlink" title="如何建立参考大难思维方式？"></a>如何建立参考大难思维方式？</h3><ul><li>一句口诀：看情况（嘴上多说”看情况”，脑子里多想“看情况”）。</li><li>两句追问：为什么、怎么做。</li></ul><h3 id="真理论是看情况的"><a href="#真理论是看情况的" class="headerlink" title="真理论是看情况的"></a>真理论是看情况的</h3><p>符合论：认为与事实符合就是真理<br>融惯论：能举出证据说出理由就是真理<br>实用论：检验真理的唯一标准就是能否让我们更好的行动。</p><p>采用融惯论知道下的实用论，能让自己的人生过得更好。</p><h2 id="07-理论之钟：什么样的理论才算实用？"><a href="#07-理论之钟：什么样的理论才算实用？" class="headerlink" title="07 | 理论之钟：什么样的理论才算实用？"></a>07 | 理论之钟：什么样的理论才算实用？</h2><h3 id="好理论的三个标准"><a href="#好理论的三个标准" class="headerlink" title="好理论的三个标准"></a>好理论的三个标准</h3><ul><li>一般性</li><li>准确性</li><li>简单性</li></ul><h3 id="理论之钟"><a href="#理论之钟" class="headerlink" title="理论之钟"></a>理论之钟</h3><p>卡尔维克把好理论的三个标准画在了一个钟面上，12 点钟（一般性）、 4 点钟（准确性）、8 点钟（简单性）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>十点钟理论具有一般性和简单性，但是不太准确</p><p>我需要怎么做？</p><ol><li>学一些 10 点钟理论。</li><li>学习 10 点钟理论要注意到他的缺点。</li></ol><p>10 点钟理论：<br>管理者三大能力模型（技术能力、概念能力、人际能力）。</p><h2 id="08-策略一：为什么学会分类是关键？"><a href="#08-策略一：为什么学会分类是关键？" class="headerlink" title="08 | 策略一：为什么学会分类是关键？"></a>08 | 策略一：为什么学会分类是关键？</h2><h3 id="看情况的关键是分类"><a href="#看情况的关键是分类" class="headerlink" title="看情况的关键是分类"></a>看情况的关键是分类</h3><p>所谓分类，就是把事物分成不同的类别，其实就是分成不同的情况，然后根据不同的情况，进行相应的处理。所以说，看情况的一个主要方法，就是分类。</p><p>想法：看情况就是不能一概而论，要具体问题具体分析，对情况进行归类有助于提高问题的找到解决问题的经验。找到套路，找到学习参考答案的方向。</p><h3 id="洞见分类"><a href="#洞见分类" class="headerlink" title="洞见分类"></a>洞见分类</h3><p>比常见分类更高级，也更有效的分类方式，叫做“洞见分类”，洞见分类往往抓住了事物的本质。</p><p>洞见分类的三个特征：主观性、理想性、本质的。</p><p>洞见分类不仅仅在解决问题的时候可以直接用，用来吸收其他知识也很重要。</p><p>团队的一个常见的洞见分类：棒球队、橄榄球队、篮球队。</p><p>练习建立洞见分类</p><p>对于得到用户分类：<br>学习者分类：投资型学习者、生产型学习者、消费型学习者、浪费性学习者。<br>按学习方法分类：标准答案思维方式学习者、参考答案思维方式学习者。<br>按会不会学习：会学习的（掌握学习方法论）、不会学习的（学完和没学没什么区别的）</p><h2 id="09-策略二：怎样找到好的参考答案？"><a href="#09-策略二：怎样找到好的参考答案？" class="headerlink" title="09 | 策略二：怎样找到好的参考答案？"></a>09 | 策略二：怎样找到好的参考答案？</h2><p>标准参考答案：它是要找到一个在绝大多数情况下，更准确、更管用的参考答案，并且把这一答案作为”默认设置”来使用，所以把它叫作”标准参考答案”。</p><h3 id="案例一：三步回答一切问题"><a href="#案例一：三步回答一切问题" class="headerlink" title="案例一：三步回答一切问题"></a>案例一：三步回答一切问题</h3><p>第一步：说这个问题需要看情况<br>第二步：说出自己的洞见分类及每种情况的解决方案<br>第三步：分析具体的情况，参考哪一类分类的答案，并针对具体问题思考新的解决方案。</p><h3 id="如何让婚姻幸福"><a href="#如何让婚姻幸福" class="headerlink" title="如何让婚姻幸福"></a>如何让婚姻幸福</h3><ul><li>寻找关于另一半行为的最善意的解释，并且相信它。</li><li>对另一半的赞扬和批评的比例不要低于 5：1。</li><li>尽可能让做爱的次数多于吵架的次数。</li></ul><h3 id="如何回答二选一问题"><a href="#如何回答二选一问题" class="headerlink" title="如何回答二选一问题"></a>如何回答二选一问题</h3><ul><li>不要二选一，该怎么做？一个具体做法就是看情况，界定不同的情况，在某些情况下选其中一个，在另外一些情况下选另一个。</li><li>两个都要，两个选项没有对立性，可以同时存在。</li></ul><h3 id="两个关于标准参考答案的建议"><a href="#两个关于标准参考答案的建议" class="headerlink" title="两个关于标准参考答案的建议"></a>两个关于标准参考答案的建议</h3><ul><li>对于一些重要的问题，你要掌握一些标准参考答案。</li><li>掌握标准参考答案之后，要牢记这不是标准答案，只是参考答案。</li></ul><h2 id="10-策略三：互动式学习为什么重要？"><a href="#10-策略三：互动式学习为什么重要？" class="headerlink" title="10 | 策略三：互动式学习为什么重要？"></a>10 | 策略三：互动式学习为什么重要？</h2><h3 id="季清华学习层次模型"><a href="#季清华学习层次模型" class="headerlink" title="季清华学习层次模型"></a>季清华学习层次模型</h3><pre><code class=" mermaid">mindmap  root)学习的层次(    被动式学习      概念: 被动接受、投入很少    主动式学习      概念：积极投入、划重点、记笔记。    建构式学习      概念：积极投入后能产生一些新想法，新观点。    互动式学习      概念：新观点之间进行碰撞、讨论。</code></pre><h3 id="互动式学习的本质"><a href="#互动式学习的本质" class="headerlink" title="互动式学习的本质"></a>互动式学习的本质</h3><p>互动式学习的本质不是在两个人之间进行互动，而是在不同的参考答案之间进行互动。</p><h3 id="方法论一：守破离"><a href="#方法论一：守破离" class="headerlink" title="方法论一：守破离"></a>方法论一：守破离</h3><ul><li>守：守卫自己的观点。</li><li>破：攻破别人的观点。</li><li>离：离开前面两个观点，提出一个新的、更好的观点。</li></ul><h3 id="方法论二：事前建构"><a href="#方法论二：事前建构" class="headerlink" title="方法论二：事前建构"></a>方法论二：事前建构</h3><p>事前建构，你要真正的独立思考，开动脑筋；而事后建构，你多多少少会受到别人观点的影响。</p><h3 id="方法论三：单人互动"><a href="#方法论三：单人互动" class="headerlink" title="方法论三：单人互动"></a>方法论三：单人互动</h3><p>事前建构+守破离</p><p>提前建立自己的参考答案，和其他人的参考答案进行互动</p><h2 id="11-策略四：-“反过来想”-三大招式是什么？"><a href="#11-策略四：-“反过来想”-三大招式是什么？" class="headerlink" title="11 | 策略四： “反过来想” 三大招式是什么？"></a>11 | 策略四： “反过来想” 三大招式是什么？</h2><h3 id="对立式"><a href="#对立式" class="headerlink" title="对立式"></a>对立式</h3><p>末位淘汰&lt;-&gt;首位淘汰</p><h3 id="互补式"><a href="#互补式" class="headerlink" title="互补式"></a>互补式</h3><p>如何赚钱 &lt;-&gt; 如何不赔钱</p><h3 id="因果式"><a href="#因果式" class="headerlink" title="因果式"></a>因果式</h3><p>公司小所以才要发展技术能力 &lt;-&gt; 因为忙于发展技术能力所以公司才迟迟没能发展壮大。</p><h2 id="12-策略五：如何注重过程，而不是结果？"><a href="#12-策略五：如何注重过程，而不是结果？" class="headerlink" title="12 | 策略五：如何注重过程，而不是结果？"></a>12 | 策略五：如何注重过程，而不是结果？</h2><p>注重过程，就是把结果当作可能性之一，重点学习得出答案的过程，看是不是可以通过同样的过程，得出不同的参考答案。</p><h3 id="结果可能误导你"><a href="#结果可能误导你" class="headerlink" title="结果可能误导你"></a>结果可能误导你</h3><p>卡尼曼的最喜欢的一组公式</p><ul><li>成功 &#x3D; 能力+运气</li><li>巨大的成功 &#x3D; 多一些能能力 + 多很多运气</li></ul><h3 id="过程是能力的核心"><a href="#过程是能力的核心" class="headerlink" title="过程是能力的核心"></a>过程是能力的核心</h3><p>过程，才是一种能力的核心，才是我们真正要掌握的。</p><h3 id="跟着高手学过程"><a href="#跟着高手学过程" class="headerlink" title="跟着高手学过程"></a>跟着高手学过程</h3><ul><li>跟着高手学过程（我不是跟着高手学知识，而是跟着高手学习他得出知识的过程）</li><li>重点关注不完美的过程</li><li>从结果还原过程（结果往往吸引了我们的注意力，我们要有意识地多问这样一个问题：这个结果是通过什么样过程得来的？或者说，这个结论是通过什么样的过程推理而来的）</li></ul><h2 id="13-小结：如何进行合理质疑"><a href="#13-小结：如何进行合理质疑" class="headerlink" title="13 | 小结：如何进行合理质疑"></a>13 | 小结：如何进行合理质疑</h2><h3 id="样本具有代表性吗？"><a href="#样本具有代表性吗？" class="headerlink" title="样本具有代表性吗？"></a>样本具有代表性吗？</h3><p>举例证明一个观点是否正确的时候要思考样本是否具有代表性。举例只能说明不能论证。</p><h3 id="警惕平均数"><a href="#警惕平均数" class="headerlink" title="警惕平均数"></a>警惕平均数</h3><p>管理大师：大前言一被录用的例子，1&#x2F;8 通过率</p><h3 id="注意非线性"><a href="#注意非线性" class="headerlink" title="注意非线性"></a>注意非线性</h3><h3 id="不要把手指当月亮"><a href="#不要把手指当月亮" class="headerlink" title="不要把手指当月亮"></a>不要把手指当月亮</h3><h2 id="14-路标：为什么学习一定要聚焦？"><a href="#14-路标：为什么学习一定要聚焦？" class="headerlink" title="14 | 路标：为什么学习一定要聚焦？"></a>14 | 路标：为什么学习一定要聚焦？</h2><h3 id="学习的业余爱好者的通病"><a href="#学习的业余爱好者的通病" class="headerlink" title="学习的业余爱好者的通病"></a>学习的业余爱好者的通病</h3><p>学习面很广，但总是浅尝辄止</p><p>掌握某种新技能、学习某门新学科，最大的动力在于急切地需要应用。基于这一原因，许多科学家（我当然也在其中）在没有感到压力时并不学习新学科和新技能，即便这些东西很容易掌握。</p><p>如果学习一个知识而没有应用场景那么很容易发生学而不用的坏习惯。</p><h3 id="聚焦才能擅长"><a href="#聚焦才能擅长" class="headerlink" title="聚焦才能擅长"></a>聚焦才能擅长</h3><p>如果说卓有成效的学习有唯一秘诀的话，那就是聚焦。</p><ol><li>只有聚焦才能擅长</li><li>学习&#x3D;我知道+我不知道</li></ol><p>学习就是用已有知识去建构新知识，用已有知识去吸收新知识，去跟新知识建立联系。</p><h3 id="聚焦产生马太效应"><a href="#聚焦产生马太效应" class="headerlink" title="聚焦产生马太效应"></a>聚焦产生马太效应</h3><p>你的所有学习，都是建立在你的已有知识的基础上。这一点很重要。<br>决定不学什么跟决定学什么同样重要</p><h2 id="15-聚焦经典：如何聚焦不变？"><a href="#15-聚焦经典：如何聚焦不变？" class="headerlink" title="15 | 聚焦经典：如何聚焦不变？"></a>15 | 聚焦经典：如何聚焦不变？</h2><h3 id="大多数事物的本质没有变"><a href="#大多数事物的本质没有变" class="headerlink" title="大多数事物的本质没有变"></a>大多数事物的本质没有变</h3><p>约翰·奈斯比特 《大趋势》 很多事物变了，但大多数事物没有变<br>杰夫·贝佐斯 亚马逊顾客的基本需求是不变的，他们希望有更多的选择，更低的价格，更快的配送</p><h3 id="认出“乔装打扮的不变”"><a href="#认出“乔装打扮的不变”" class="headerlink" title="认出“乔装打扮的不变”"></a>认出“乔装打扮的不变”</h3><p>你眼中的问题，其实是别人的解决方案。如果男朋友不理你，只顾自己打电子游戏。你认为这是个问题，对不对？实际上，这是你男朋友的解决方案。他觉得，跟你聊天太无聊了，于是用打电子游戏来解决问题。<br>NLP的一个核心理念就是：每一个负面行为背后，都有一个正面理由。<br>NLP的这个核心理念，其实也是乔装打扮的旧思想。这个旧思想，可以一直追溯到苏格拉底的一个思想，那就是：没有人会故意作恶。苏格拉底的意思是：没有人会故意做对自己没有好处的事情。</p><h3 id="聚集不变的三个建议"><a href="#聚集不变的三个建议" class="headerlink" title="聚集不变的三个建议"></a>聚集不变的三个建议</h3><p>第一个建议是：聚焦一本“向导之书”。<br>第二个建议是：聚焦一本“经典之书”<br>第三个建议是：聚焦“一本”经典之书，反复阅读。</p><h2 id="16-小偷式学习法：如何聚焦实用"><a href="#16-小偷式学习法：如何聚焦实用" class="headerlink" title="16 | 小偷式学习法：如何聚焦实用"></a>16 | 小偷式学习法：如何聚焦实用</h2><h3 id="有用的标准：人生三大课题（工作、人际关系和个人成长）"><a href="#有用的标准：人生三大课题（工作、人际关系和个人成长）" class="headerlink" title="有用的标准：人生三大课题（工作、人际关系和个人成长）"></a>有用的标准：人生三大课题（工作、人际关系和个人成长）</h3><p>美国哲学家理查德·罗蒂：作为成年人的标志之一就是懂得：没有任何书会向我们揭示宇宙的秘密或者生命的意义。这意味着认识到，所有这些过去的有趣的书籍都只是一个我们终将有一天有幸能摆脱掉的梯子上的一些梯级而已</p><p>教育的四大支柱：learn to know，学会求知，learn to do，学会做事，learn to live together，学会共同生活，还有learn to be，官方翻译是“学会生存”，但我觉得翻译成“学会成为自己”可能更好一些。</p><h3 id="围绕工作来学习"><a href="#围绕工作来学习" class="headerlink" title="围绕工作来学习"></a>围绕工作来学习</h3><p>第一个建议是：在工作、人际关系和个人成长这三大课题中，首先围绕工作来学习。</p><h3 id="进行“小偷式学习”"><a href="#进行“小偷式学习”" class="headerlink" title="进行“小偷式学习”"></a>进行“小偷式学习”</h3><p>第一个特点是，学习的对象很广泛、很发散。用一個不恰當但形象的说法，就好像流窜作案的小偷一样，不管是谁，都可能成为他下手的对象。</p><p>第二个是特点是，学习的目标很明确，只对少数东西感兴趣。哪些东西呢？就是对自己有价值的东西。小偷如果撬锁进入一所房子，他不会关心这所房子设计风格是什么样的，主人有什么兴趣爱好，他只关心一件事，就是能带走什么有价值的财物。</p><p>“小偷式学习”的第三个特点是追求学习的效率，要快速有收获。小偷必须得快，所以他只带走最容易带走、最容易变现的财物</p><h2 id="17-大盗式学习法：如何聚焦专题"><a href="#17-大盗式学习法：如何聚焦专题" class="headerlink" title="17 | 大盗式学习法：如何聚焦专题"></a>17 | 大盗式学习法：如何聚焦专题</h2><h3 id="聚焦一个专门的问题"><a href="#聚焦一个专门的问题" class="headerlink" title="聚焦一个专门的问题"></a>聚焦一个专门的问题</h3><p>第一，它是一个问题，可以用提问的形式呈现出来。第二，它是一个比较具体的问题，往往有着特定的用途。第三个特点是，要回答这个问题，所需要的知识往往是跨学科、跨专业的。</p><p>聚焦专题，就是调动可以调动的各种知识，来攻克一个专门的问题。</p><h3 id="聚焦专题的四大好处"><a href="#聚焦专题的四大好处" class="headerlink" title="聚焦专题的四大好处"></a>聚焦专题的四大好处</h3><ol><li>就是你只有聚焦一个专题，才能把这个专题变成你的擅长，变成你的核心竞争力</li><li>就是你只有聚焦这个专题之后，才能掌握关于这个专题的深层结构</li><li>让你有了一把“知识钥匙”，可以用来打开其他的知识宝库</li><li>跟刚刚说的“知识钥匙”有点像，也是说聚焦专题可以帮助你学习其他知识。</li></ol><h3 id="聚焦专题的步骤"><a href="#聚焦专题的步骤" class="headerlink" title="聚焦专题的步骤"></a>聚焦专题的步骤</h3><ol><li>找准你要聚焦的问题</li><li>围绕你聚焦的问题，聚焦一些作者，读上 100 本书</li><li>就是你在这些答案的基础上，提炼出自己的答案，形成自己的体系。</li><li>应用“小偷式学习法”</li></ol><h2 id="18-苏东坡学习法：如何聚焦样本？"><a href="#18-苏东坡学习法：如何聚焦样本？" class="headerlink" title="18 | 苏东坡学习法：如何聚焦样本？"></a>18 | 苏东坡学习法：如何聚焦样本？</h2><h3 id="聚焦少数样本"><a href="#聚焦少数样本" class="headerlink" title="聚焦少数样本"></a>聚焦少数样本</h3><p>在学习样本上，我们同样需要聚焦，同样需要学得少而深。</p><h3 id="苏东坡式学习法"><a href="#苏东坡式学习法" class="headerlink" title="苏东坡式学习法"></a>苏东坡式学习法</h3><p>什么叫“更丰富地体验和阐释这段历史”？其实这就是苏东坡式学习法。</p><p>我先介绍苏东坡的两句诗：“旧书不厌百回读，熟读深思子自知。”苏东坡认为，一本好书里的宝物太多，也就是体现的规律很丰富，不可能一次都学到手，所以要反复读。但是这个反复读是有技巧的，就是每次只从一个角度去读。</p><h3 id="一本表现整个宇宙的书"><a href="#一本表现整个宇宙的书" class="headerlink" title="一本表现整个宇宙的书"></a>一本表现整个宇宙的书</h3><p>《匹克威克外传》</p><h3 id="史上最短管理案例"><a href="#史上最短管理案例" class="headerlink" title="史上最短管理案例"></a>史上最短管理案例</h3><p>三个石匠在打石头。一个路人经过，问你们在做什么。第一个石匠说：“我在打石头，养家糊口。”第二个石匠说：“我在做全国最好的石匠活。”第三个石匠抬起头，眼中闪过一丝光芒，说：“我在建造一座大教堂。</p><h2 id="19-路标：什么是模式化学习？"><a href="#19-路标：什么是模式化学习？" class="headerlink" title="19 | 路标：什么是模式化学习？"></a>19 | 路标：什么是模式化学习？</h2><h3 id="专家和新手的区别"><a href="#专家和新手的区别" class="headerlink" title="专家和新手的区别"></a>专家和新手的区别</h3><p>专家看到的是模式，新手看到的是碎片。<br>专家看到的表面特征之下的深层结构，就是模式，而新手看到的只是表面特征，也就是碎片。</p><p>大师、高手、新手 5 秒钟记忆残局复刻，大师&gt;高手&gt;新手<br>大师、高手、新手 5 秒钟记忆随机棋子，大师、于高手、新手 都差不多<br>专家看到的不是一个个需要死记硬背的棋子，而是各个棋子彼此关联的一个模式。</p><h3 id="模式化学习的三个特点"><a href="#模式化学习的三个特点" class="headerlink" title="模式化学习的三个特点"></a>模式化学习的三个特点</h3><ol><li>模式化学习学的更少</li><li>模式化学习学的更深</li><li>先难后易</li></ol><p>为什么模式化学习先难</p><h2 id="20-模式化学习金字塔：如何从碎片到模式？"><a href="#20-模式化学习金字塔：如何从碎片到模式？" class="headerlink" title="20 | 模式化学习金字塔：如何从碎片到模式？"></a>20 | 模式化学习金字塔：如何从碎片到模式？</h2><h3 id="学习的-SOLO-模型"><a href="#学习的-SOLO-模型" class="headerlink" title="学习的 SOLO 模型"></a>学习的 SOLO 模型</h3><p>可观察的学习结果结构（Structure of the Observed Learning Outcome）。从可以观察到的学习结果来看，学习可以分为从低到高五个层次：</p><ol><li>前结构（学习者没有学到任何东西，任何结构都没有建立起来）</li><li>单点结构（学习者掌握了一点相关的内容，但只学到一个孤零零的知识点）</li><li>多点结构（学习者掌握了不止一个知识点，但是在这些知识点之间不能建立联系）</li><li>关联结构（学习者掌握了不止一个知识点，并且掌握了这些知识点之间的关系）</li><li>抽象扩展结构（把关联结构提炼成更为抽象的结构，因此可以把学到的内容扩展到其他领域）</li></ol><p>模式化学习金字塔</p><ol><li>零学习</li><li>单点碎片化学习</li><li>多点碎片化学习</li><li>模式化学习</li><li>模式迁移</li></ol><p>模式化学习和碎片化学习，不是一个非此即彼的对立关系，而是一个从低到高的层次。模式化学习是以碎片化学习为基础的。</p><p>模式化学习的最高层次是模式迁移，是把一个领域的模式，应用到另一个领域之中。</p><h2 id="21-方法一：如何用模式吸收碎片"><a href="#21-方法一：如何用模式吸收碎片" class="headerlink" title="21 | 方法一：如何用模式吸收碎片"></a>21 | 方法一：如何用模式吸收碎片</h2><h3 id="学习-x3D-模式-碎片"><a href="#学习-x3D-模式-碎片" class="headerlink" title="学习&#x3D;模式+碎片"></a>学习&#x3D;模式+碎片</h3><p>该公式是学习&#x3D;我知道+我不知道，这个公式是描述性的，学习&#x3D;模式+碎片是规范性的。应该占有模式知识，让模式知识成为你的已有知识，然后用它去吸收新知识。</p><h3 id="中距离学习模式"><a href="#中距离学习模式" class="headerlink" title="中距离学习模式"></a>中距离学习模式</h3><p>所谓的“中距离”，就是既跟自己日常的工作和生活保持一定距离，但是又离得不那么远，仍然可以跟自己的实际联系起来。</p><h3 id="用模式辨别碎片"><a href="#用模式辨别碎片" class="headerlink" title="用模式辨别碎片"></a>用模式辨别碎片</h3><p>当你掌握模式之后，就可以用模式来辨别一个信息是不是重要的、关键的信息。</p><h3 id="用模式寻找碎片"><a href="#用模式寻找碎片" class="headerlink" title="用模式寻找碎片"></a>用模式寻找碎片</h3><p>掌握了模式的高手，他们寻找的碎片信息往往是一些细微的、不明显的信息，是容易被其他人忽略的信息。</p><h3 id="用模式安放碎片"><a href="#用模式安放碎片" class="headerlink" title="用模式安放碎片"></a>用模式安放碎片</h3><p>当你辨别完碎片，寻找到碎片，就进入第四步：用模式安放碎片。</p><h2 id="22-方法二：如何用模式分析碎片"><a href="#22-方法二：如何用模式分析碎片" class="headerlink" title="22 | 方法二：如何用模式分析碎片"></a>22 | 方法二：如何用模式分析碎片</h2><h3 id="用模式分析碎片的三个步骤"><a href="#用模式分析碎片的三个步骤" class="headerlink" title="用模式分析碎片的三个步骤"></a>用模式分析碎片的三个步骤</h3><ol><li>推测：根据碎片提供的线索，推测可以使用哪个模式。</li><li>检验：检验自己的推测是否成立。</li><li>推广：如果检验成功，那进一步思考这个模式可以怎么推广到其他碎片。</li></ol><p>任正非的一段话：我们要砍掉基层的脑袋，中层的屁股，高层的手脚。</p><ol><li>根据基层，中层、高层的推测可以使用管理者三大能力模型</li><li>高层的脑袋对应概念能力，基层最重要的是技术能力别胡思乱想</li><li>推广到任正非的其他话（看任正非传的时候可以看看有没有）</li></ol><p>三大好处：看门道而非看热闹</p><ol><li>能更准确的理解碎片</li><li>学的更本质，因为学到了背后的模式</li><li>深层迁移（举一反三）</li></ol><h2 id="23-方法三：-如何用模式比较模式"><a href="#23-方法三：-如何用模式比较模式" class="headerlink" title="23 | 方法三： 如何用模式比较模式"></a>23 | 方法三： 如何用模式比较模式</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>同样一个问题，有好多不同的模式在回答，决定应该使用哪一个时。</p><h3 id="存同求异"><a href="#存同求异" class="headerlink" title="存同求异"></a>存同求异</h3><p>第一步：找出要比较的两个模式的相似之处<br>第二步：找出要比较的两个模式的不同之处<br>第三步：对两个模式进行取舍</p><h3 id="比较-“能力与态度模型”与刘强东模型"><a href="#比较-“能力与态度模型”与刘强东模型" class="headerlink" title="比较 “能力与态度模型”与刘强东模型"></a>比较 “能力与态度模型”与刘强东模型</h3><h4 id="能力与态度模型"><a href="#能力与态度模型" class="headerlink" title="能力与态度模型:"></a>能力与态度模型:</h4><ol><li>能力强-态度好 - 重用</li><li>能力强-态度差 - 淘汰</li><li>能力弱-态度好 - 培训</li><li>能力弱-态度差 - 淘汰</li></ol><h4 id="刘强东模型"><a href="#刘强东模型" class="headerlink" title="刘强东模型"></a>刘强东模型</h4><ol><li>能力强-价值观好 - 金子</li><li>能力稍强-价值观较好 - 钢</li><li>能力较弱-价值观好 - 铁</li><li>能力弱-价值观好 - 废铁</li><li>能力强-价值观差 - 铁锈</li></ol><p>相同点：能力相同<br>不同点：</p><ol><li>态度与价值观不同，但是其实是一致的，价值观的表述更具体</li><li>能力强-态度好 被细分为金子和钢</li><li>使用了比喻，自带解决方案<br>取舍：保留两个模式， 能力与态度模型 更通用  刘强东模型 更好用</li></ol><h3 id="曾仕强模型和凯利模型"><a href="#曾仕强模型和凯利模型" class="headerlink" title="曾仕强模型和凯利模型"></a>曾仕强模型和凯利模型</h3><h4 id="曾仕强模型"><a href="#曾仕强模型" class="headerlink" title="曾仕强模型"></a>曾仕强模型</h4><p>硬汉、顺民和隐士</p><h4 id="凯利模型"><a href="#凯利模型" class="headerlink" title="凯利模型"></a>凯利模型</h4><p>可以按照是否积极参与和是否独立思考这两个维度</p><ol><li>明星，又积极参与又独立思考的</li><li>顺民，积极参与但是不独立思考的</li><li>隐士，独立思考但是不积极参与的</li><li>绵羊，既不积极参与也不独立思考的</li></ol><h3 id="比较凯利模型与能力与态度模型"><a href="#比较凯利模型与能力与态度模型" class="headerlink" title="比较凯利模型与能力与态度模型"></a>比较凯利模型与能力与态度模型</h3><p>相同点：都是员工的能力模型<br>不同点：模型的分类方式不同维度的极参与与独立思考是 能力与态度模型中态度维度的细分<br>取舍：都保留</p><h2 id="24-方法四：-如何用模式联系模式？"><a href="#24-方法四：-如何用模式联系模式？" class="headerlink" title="24 | 方法四： 如何用模式联系模式？"></a>24 | 方法四： 如何用模式联系模式？</h2><p>模式比较模式：是在两个离得很近的模式之间找不同。<br>模式联系模式：在两个离得很远的模式之间找相同。</p><p>如何真正理解欧姆定律</p><p>欧姆定律： 电流 &#x3D; 电压&#x2F;电阻</p><p>如果你真正掌握了一个知识，你就可以把它变为一个更为广泛的模式，在其他领域取应用它。</p><p>流量&#x3D;压力&#x2F;阻力<br>贪污&#x3D;权利&#x2F;来自社会及法律的约束<br>绩效&#x3D;动力&#x2F;阻力</p><h3 id="用模式练习模式的好处"><a href="#用模式练习模式的好处" class="headerlink" title="用模式练习模式的好处"></a>用模式练习模式的好处</h3><p>用模式练习模式，其实就是发现不同的模式背后那个更为高阶的模式。<br>结果&#x3D;动力&#x2F;阻力</p><ol><li>用少数高阶模式就可以理解许多现象</li><li>发现了底层模式，对这个世界的理解更加本质和深刻了</li><li>发现这个学科的A模式和另一个学科的B模式，其实都来自同一个高阶模式的时候，在学习B模式的时候，就可以把模式A作为一把知识钥匙。</li></ol><h3 id="掌握少数“看家模式”"><a href="#掌握少数“看家模式”" class="headerlink" title="掌握少数“看家模式”"></a>掌握少数“看家模式”</h3><p>读书不记得，如何？<br>王阳明：只要晓得，如何要记得，若徒要记得，便不晓得。</p><h2 id="25-路标：-为什么深层迁移最重要？"><a href="#25-路标：-为什么深层迁移最重要？" class="headerlink" title="25 | 路标： 为什么深层迁移最重要？"></a>25 | 路标： 为什么深层迁移最重要？</h2><h3 id="迁移为什么重要？"><a href="#迁移为什么重要？" class="headerlink" title="迁移为什么重要？"></a>迁移为什么重要？</h3><p>迁移：指的是把一个情境之中学到的知识应用到其他情景之中。</p><p>举一反三 &amp; 学以致用</p><p>近迁移与远迁移</p><p>在两个比较相似的情景之间进行迁移，远迁移就是在两个不太相似的情景之间进行迁移。</p><h3 id="成功迁移的标准"><a href="#成功迁移的标准" class="headerlink" title="成功迁移的标准"></a>成功迁移的标准</h3><p>迁移要成功，关键不在与远近，而在于把模式提炼出来。</p><h3 id="深层迁移才有效"><a href="#深层迁移才有效" class="headerlink" title="深层迁移才有效"></a>深层迁移才有效</h3><p>表层迁移：把一个情景的表层碎片知识直接应用到另一个情景之中。直接迁移碎片。<br>深层迁移：把一个知识进行去情景化，把隐藏在表层碎片知识背后，那个深层的模式提炼出来，然后应用到另一个情景之中。迁移深层模式。</p><h2 id="26-四问学习法：最重要的学习工具"><a href="#26-四问学习法：最重要的学习工具" class="headerlink" title="26 | 四问学习法：最重要的学习工具"></a>26 | 四问学习法：最重要的学习工具</h2><h3 id="什么是四问学习法？"><a href="#什么是四问学习法？" class="headerlink" title="什么是四问学习法？"></a>什么是四问学习法？</h3><p>听想变用</p><ol><li>我听到什么？听清楚听明白，复述和概括</li><li>我想到什么？想出知识背后的模式</li><li>我变成什么? 调整为适自己的知识</li><li>我用到哪里？用到自己的身上</li></ol><h3 id="四问学习法的示范一"><a href="#四问学习法的示范一" class="headerlink" title="四问学习法的示范一"></a>四问学习法的示范一</h3><h3 id="使用四问学习法的好处"><a href="#使用四问学习法的好处" class="headerlink" title="使用四问学习法的好处"></a>使用四问学习法的好处</h3><p>我们可以学的很丰富，可以对一个知识点进行不止一个层次上的迁移</p><h2 id="27-案例：为什么高手都在用四问学习法？"><a href="#27-案例：为什么高手都在用四问学习法？" class="headerlink" title="27 | 案例：为什么高手都在用四问学习法？"></a>27 | 案例：为什么高手都在用四问学习法？</h2><p>因为高手都已经掌握深层迁移，四问学习法是深层迁移的一个标准工具，或者反过来说，四问学习法是总结或者发现于高手的学习方法。</p><h3 id="案例1：查尔菲"><a href="#案例1：查尔菲" class="headerlink" title="案例1：查尔菲"></a>案例1：查尔菲</h3><p>讲座：日本有为科学家发现能使水母发出荧光的蛋白质，如果用紫外线照射这种蛋白质，他就会发出绿色的光。</p><p>查尔菲当时在研究昆虫的神经系统，而他研究的昆虫的皮肤正好是透明的。他想到把这种蛋白质注入到昆虫的身体里，然后用紫外线来照射，就可以更好的观察昆虫了。</p><h3 id="高手案例2：-任正非"><a href="#高手案例2：-任正非" class="headerlink" title="高手案例2： 任正非"></a>高手案例2： 任正非</h3><p>任正非游览大阪古城，任正非看到古城中的一口古井<br>听：看到一口古井<br>想：困境求生考的是少数关键因素。在城堡被围困的时候，水源是一个关键因素。<br>变：在企业遇到寒冬的时候现金流是一个关键因素，备足现金流，应对冬天<br>用：把旗下电器公司卖掉度过了寒冬</p><p>中庸：博学之、审问之，慎思之，明辨之，笃行之。<br>佛经：闻思修。<br>华罗庚：读书由薄到厚再由厚到薄。</p><p>四问学习法是练武口诀，深层迁移是你要练成的功夫。</p><h2 id="28-指南一：厘清四问学习法的四大误区？"><a href="#28-指南一：厘清四问学习法的四大误区？" class="headerlink" title="28 | 指南一：厘清四问学习法的四大误区？"></a>28 | 指南一：厘清四问学习法的四大误区？</h2><p>误区一：听的太单调<br>误区二：想的不深入<br>误区三：变的不灵活<br>误区四：用的太宽泛</p><h2 id="29-指南二：使用四问学习法的四个技巧"><a href="#29-指南二：使用四问学习法的四个技巧" class="headerlink" title="29 | 指南二：使用四问学习法的四个技巧"></a>29 | 指南二：使用四问学习法的四个技巧</h2><h3 id="技巧一：诠释学的四个问题"><a href="#技巧一：诠释学的四个问题" class="headerlink" title="技巧一：诠释学的四个问题"></a>技巧一：诠释学的四个问题</h3><p>第一个问题是：文本究竟说了什么？<br>问这个问题是要搞清楚，你读到的内容，字面意思是什么。</p><p>第二个问题是：文本想要说什么？<br>这个问题是让你搞清楚，文本在字面意思的背后，真正想要传递的意思是什么，也就是作者的本意是什么。</p><p>第三个问题是：文本能够说什么？<br>这个问题让你抛开作者的本意，自己展开想象的翅膀，看你从文本之中，可以理解出哪些意思来。</p><p>第四个问题是：文本应该说什么？<br>前面三个问题，让你对文本产生了各种各样的理解。第四个问题是让你选择，在这些理解当中，你最后选择哪一个呢</p><h3 id="技巧二：从三个方向想"><a href="#技巧二：从三个方向想" class="headerlink" title="技巧二：从三个方向想"></a>技巧二：从三个方向想</h3><p>第一个方向是其他的碎片。<br>第二个方向是自己的问题。<br>第三个方向是已有的模式。</p><h3 id="技巧三：换词造句"><a href="#技巧三：换词造句" class="headerlink" title="技巧三：换词造句"></a>技巧三：换词造句</h3><p>丈夫应该多赞扬妻子</p><h3 id="技巧四：执行意图"><a href="#技巧四：执行意图" class="headerlink" title="技巧四：执行意图"></a>技巧四：执行意图</h3><p>如果（怎么样）……就（怎么样）……</p><h2 id="30-总结：如何让”学习力“为你所用？"><a href="#30-总结：如何让”学习力“为你所用？" class="headerlink" title="30 | 总结：如何让”学习力“为你所用？"></a>30 | 总结：如何让”学习力“为你所用？</h2><h3 id="学习的定义"><a href="#学习的定义" class="headerlink" title="学习的定义"></a>学习的定义</h3><p>学习心理学：经验所带来的心理表征或联结的长期变化<br>丹麦著名学习理论家克努兹·伊列雷斯：发生于生命有机体中的任何导向持久性能力改变的过程，而且这些过程的发生并不是单纯由于生理性成熟或衰老机制的原因</p><p>所谓学习，就是你主动做了一些事，给你的认知或者行为带来了长期的变化。</p><p>怎样才算学好了一个知识？就是看你是不是在“听想变用”上，产生了长期的变化</p><h3 id="三个建议"><a href="#三个建议" class="headerlink" title="三个建议"></a>三个建议</h3><p>聚焦一门课程<br>聚焦一个老师<br>刻意练习四问学习法</p><p>重新学一遍要回答作者的每个问题</p><h2 id="学习知识的清单"><a href="#学习知识的清单" class="headerlink" title="学习知识的清单"></a>学习知识的清单</h2><ul><li><input disabled="" type="checkbox"> 这对我有什么用？</li><li><input disabled="" type="checkbox"> 他说的对吗？</li><li><input disabled="" type="checkbox"> 能分分类吗？</li><li><input disabled="" type="checkbox"> 事前建构+守破离</li></ul>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读</tag>
      
      <tag>笔记</tag>
      
      <tag>刘澜-《学习力 30 讲》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何有效阅读一本书</title>
    <link href="/2023/10/20/notes/effective_read/"/>
    <url>/2023/10/20/notes/effective_read/</url>
    
    <content type="html"><![CDATA[<h2 id="图书信息"><a href="#图书信息" class="headerlink" title="图书信息"></a>图书信息</h2><table><thead><tr><th>书名</th><th>如何有效阅读一本书：笔记读书法</th></tr></thead><tbody><tr><td>作者</td><td>【日】奥野宣之</td></tr><tr><td>出版社</td><td>江西人民出版社</td></tr><tr><td>阅读时间</td><td>2023-10-01 ~ 2023-10-20</td></tr></tbody></table><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>摘抄：</p><p>笔记：</p><p>感想：<br>一直以为读书就是看过之后就可以了，其实不然，要将书中的内容内化为自己的本能才能算掌握好这本书</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>标点符号规范</title>
    <link href="/2023/02/23/writing-standard/marks/"/>
    <url>/2023/02/23/writing-standard/marks/</url>
    
    <content type="html"><![CDATA[<h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><p>（1）中文语句的标点符号，均应该采取全角符号，这样可以与全角文字保持视觉的一致。</p><p>（2）如果整句为英文，则该句使用英文&#x2F;半角标点。</p><p>（3）句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首。</p><p>（4）点号（句号、逗号、顿号、分号、冒号）不得出现在标题的末尾，而标号（引号、括号、破折号、省略号、书名号、着重号、间隔号、叹号、问号）可以。</p><h2 id="句号"><a href="#句号" class="headerlink" title="句号"></a>句号</h2><p>（1）中文语句的结尾处应该用全角句号（<code>。</code>）。</p><p>（2）句子末尾用括号加注时，句号应在括号之外。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：关于文件的输出，请参照第 1.3 节（见第 26 页。）<br><br>正确：关于文件的输出，请参照第 1.3 节（见第 26 页）。<br></code></pre></td></tr></table></figure><h2 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a>逗号</h2><p>（1）逗号（<code>，</code>）表示句子内部的一般性停顿。</p><p>（2）注意避免“一逗到底”，即整个段落除了结尾，全部停顿都使用逗号。</p><h2 id="顿号"><a href="#顿号" class="headerlink" title="顿号"></a>顿号</h2><p>（1）句子内部的并列词，应该用全角顿号(<code>、</code>) 分隔，而不用逗号，即使并列词是英语也是如此。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：我最欣赏的科技公司有 Google, Facebook, 腾讯, 阿里和百度等。<br><br>正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。<br></code></pre></td></tr></table></figure><p>（2）英文句子中，并列词语之间使用半角逗号（<code>,</code>）分隔。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：Microsoft Office includes Word, Excel, PowerPoint, Outlook and other components.<br></code></pre></td></tr></table></figure><p>（3）中文句子内部的并列词，最后一个尽量使用（<code>和</code>）来连接，使句子读起来更加连贯，下面两个句子都可以，第二个更优。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里，以及百度等。<br><br>正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。<br></code></pre></td></tr></table></figure><h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><p>（1）分号（<code>；</code>）表示复句内部并列分句之间的停顿。</p><h2 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h2><p>（1）引用时，应该使用全角双引号（<code>“ ”</code>），注意前后双引号不同。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：许多人都认为客户服务的核心是“友好”和“专业”。<br></code></pre></td></tr></table></figure><p>（2）引号里面还要用引号时，外面一层用双引号，里面一层用单引号（<code>‘ ’</code>），注意前后单引号不同。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：鲍勃解释道：“我要放音乐，可萨利说，‘不行！’。”<br></code></pre></td></tr></table></figure><h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p>（1）补充说明时，使用全角圆括号（<code>（）</code>），括号前后不加空格。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：请确认所有的连接（电缆和接插件）均安装牢固。<br></code></pre></td></tr></table></figure><p>（2）几种括号的中英文名称。</p><table><thead><tr><th></th><th align="center">英文</th><th align="center">中文</th></tr></thead><tbody><tr><td><code>&#123; &#125;</code></td><td align="center">braces 或 curly brackets</td><td align="center">大括号</td></tr><tr><td><code>[ ]</code></td><td align="center">square brackets 或 brackets</td><td align="center">方括号</td></tr><tr><td><code>&lt; &gt;</code></td><td align="center">angled brackets</td><td align="center">尖括号</td></tr><tr><td><code>( )</code></td><td align="center">parentheses</td><td align="center">圆括号</td></tr></tbody></table><h2 id="冒号"><a href="#冒号" class="headerlink" title="冒号"></a>冒号</h2><p>（1）全角冒号（<code>：</code>）常用在需要解释的词语后边，引出解释和说明。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：请确认以下几项内容：时间、地点、活动名称和来宾数量。<br></code></pre></td></tr></table></figure><p>（2）表示时间时，应使用半角冒号（<code>:</code>）。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：早上 8:00<br></code></pre></td></tr></table></figure><h2 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h2><p>（1）省略号（<code>⋯⋯</code>）表示语句未完、或者语气的不连续。</p><p>（2）省略号占两个汉字空间、包含六个省略点，不要使用<code>。。。</code>或<code>...</code>等非标准形式。</p><p>（3）省略号不应与“等”这个词一起使用。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：我们为会餐准备了香蕉、苹果、梨…等各色水果。<br><br>正确：我们为会餐准备了各色水果，有香蕉、苹果、梨⋯⋯<br><br>正确：我们为会餐准备了香蕉、苹果、梨等各色水果。<br></code></pre></td></tr></table></figure><h2 id="感叹号"><a href="#感叹号" class="headerlink" title="感叹号"></a>感叹号</h2><p>（1）应该使用平静的语气叙述，尽量避免使用感叹号（<code>！</code>）。</p><p>（2）不得多个感叹号连用，比如<code>！！</code>和<code>!!!</code>。</p><h2 id="破折号"><a href="#破折号" class="headerlink" title="破折号"></a>破折号</h2><p>（1）破折号<code>————</code>一般用于进一步解释。</p><p>（2）破折号应占两个汉字的位置。如果破折号本身只占一个汉字的位置，那么前后应该留出一个半角空格。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：直觉————尽管它并不总是可靠的————告诉我，这事可能出了些问题。<br><br>例句：直觉 —— 尽管它并不总是可靠的 —— 告诉我，这事可能出了些问题。<br></code></pre></td></tr></table></figure><h2 id="连接号"><a href="#连接号" class="headerlink" title="连接号"></a>连接号</h2><p>（1）连接号用于连接两个类似的词。</p><p>（2）以下场合应该使用直线连接号（<code>-</code>），占一个半角字符的位置。</p><ul><li>两个名词的复合</li><li>图表编号</li></ul><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：氧化-还原反应<br><br>例句：图 1-1<br></code></pre></td></tr></table></figure><p>（3）数值范围（例如日期、时间或数字）应该使用波浪连接号（<code>～</code>）或一字号（<code>—</code>），占一个全角字符的位置。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：2009 年～2011 年<br></code></pre></td></tr></table></figure><p>注意，波浪连接号前后两个值都建议加上单位。</p><p>（4）波浪连接号也可以用汉字“至”代替。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：周围温度：-20 °C 至 -10 °C<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/ruanyf/document-style-guide">中文技术文档的写作规范</a>，by 阮一峰</li></ul>]]></content>
    
    
    <categories>
      
      <category>写作标准</category>
      
    </categories>
    
    
    <tags>
      
      <tag>写作</tag>
      
      <tag>标点符号</tag>
      
      <tag>规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文档规范</title>
    <link href="/2023/02/23/writing-standard/structure/"/>
    <url>/2023/02/23/writing-standard/structure/</url>
    
    <content type="html"><![CDATA[<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>软件手册是一部完整的书，建议采用下面的结构。</p><ul><li><strong>简介</strong>（Introduction）：[必备] [文件] 提供对产品和文档本身的总体的、扼要的说明</li><li><strong>快速上手</strong>（Getting Started）：[可选] [文件] 如何最快速地使用产品</li><li><strong>入门篇</strong>（Basics）：[必备] [目录] 又称“使用篇”，提供初级的使用教程<ul><li><strong>环境准备</strong>（Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件</li><li><strong>安装</strong>（Installation）：[可选] [文件] 软件的安装方法</li><li><strong>设置</strong>（Configuration）：[必备] [文件] 软件的设置</li></ul></li><li><strong>进阶篇</strong>（Advanced)：[可选] [目录] 又称“开发篇”，提供中高级的开发教程</li><li><strong>API</strong>（Reference）：[可选] [目录|文件] 软件 API 的逐一介绍</li><li><strong>FAQ</strong>：[可选] [文件] 常见问题解答</li><li><strong>附录</strong>（Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容<ul><li><strong>Glossary</strong>：[可选] [文件] 名词解释</li><li><strong>Recipes</strong>：[可选] [文件] 最佳实践</li><li><strong>Troubleshooting</strong>：[可选] [文件] 故障处理</li><li><strong>ChangeLog</strong>：[可选] [文件] 版本说明</li><li><strong>Feedback</strong>：[可选] [文件] 反馈方式</li></ul></li></ul><p>下面是两个真实范例，可参考。</p><ul><li><a href="https://redux.js.org/introduction/getting-started">Redux 手册</a></li><li><a href="http://flight-manual.atom.io/">Atom 手册</a></li></ul><h2 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h2><p>文档的文件名不得含有空格。</p><p>文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：名词解释.md<br><br>正确：glossary.md<br></code></pre></td></tr></table></figure><p>文件名建议只使用小写字母，不使用大写字母。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：TroubleShooting.md<br><br>正确：troubleshooting.md<br></code></pre></td></tr></table></figure><p>为了醒目，某些说明文件的文件名，可以使用大写字母，比如<code>README</code>、<code>LICENSE</code>。</p><p>文件名包含多个单词时，单词之间建议使用半角的连词线（<code>-</code>）分隔。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">不佳：advanced_usage.md<br><br>正确：advanced-usage.md<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/ruanyf/document-style-guide">中文技术文档的写作规范</a>，by 阮一峰</li></ul>]]></content>
    
    
    <categories>
      
      <category>写作标准</category>
      
    </categories>
    
    
    <tags>
      
      <tag>写作</tag>
      
      <tag>规范</tag>
      
      <tag>文档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>参考链接规范</title>
    <link href="/2023/02/23/writing-standard/reference/"/>
    <url>/2023/02/23/writing-standard/reference/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://www.taodocs.com/p-51273.html">产品手册中文写作规范</a>, by 华为</li><li><a href="http://guide.daocloud.io/dcs/%E5%86%99%E4%BD%9C%E8%A7%84%E8%8C%83%E5%92%8C%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83-9153803.html">写作规范和格式规范</a>, by DaoCloud</li><li><a href="http://www.hitachi-tc.co.jp/company/thesis/thesis.pdf">技术写作技巧在日汉翻译中的应用</a>, by 刘方</li><li><a href="https://www.lengoo.de/documents/styleguides/lengoo_styleguide_ZH.pdf">简体中文规范指南</a>, by lengoo</li><li><a href="https://open.leancloud.cn/copywriting-style-guide.html">文档风格指南</a>, by LeanCloud</li><li><a href="https://docs.google.com/document/d/1R8lMCPf6zCD5KEA8ekZ5knK77iw9J-vJ6vEopPemqZM/edit">豌豆荚文案风格指南</a>, by 豌豆荚</li><li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines">中文文案排版指北</a>, by sparanoid</li><li><a href="http://w3c.github.io/clreq/">中文排版需求</a>, by W3C</li><li><a href="http://www.ruanyifeng.com/blog/2017/02/filename-should-be-lowercase.html">为什么文件名要小写？</a>, by 阮一峰</li><li><a href="https://developers.google.com/style/">Google Developer Documentation Style Guide</a>, by Google</li><li><a href="http://www.moe.gov.cn/ewebeditor/uploadfile/2015/01/13/20150113091154536.pdf">出版物上数字用法的规定（国家标准GBT15835－2011）</a></li><li><a href="https://zh.wikisource.org/zh-hans/GB_3100-1993_%E5%9B%BD%E9%99%85%E5%8D%95%E4%BD%8D%E5%88%B6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8">GB 3100-1993 国际单位制及其应用</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>写作标准</category>
      
    </categories>
    
    
    <tags>
      
      <tag>写作</tag>
      
      <tag>规范</tag>
      
      <tag>参考链接</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数值规范</title>
    <link href="/2023/02/23/writing-standard/number/"/>
    <url>/2023/02/23/writing-standard/number/</url>
    
    <content type="html"><![CDATA[<h2 id="半角数字"><a href="#半角数字" class="headerlink" title="半角数字"></a>半角数字</h2><p>阿拉伯数字一律使用半角形式，不得使用全角形式。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：这件商品的价格是１０００元。<br><br>正确：这件商品的价格是 1000 元。<br></code></pre></td></tr></table></figure><h2 id="千分号"><a href="#千分号" class="headerlink" title="千分号"></a>千分号</h2><p>数值为千位以上，应添加千分号（半角逗号）。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">XXX 公司的实收资本为 ￥1,258,000 人民币。<br></code></pre></td></tr></table></figure><p>对于 4 位的数值，千分号是选用的，比如<code>1000</code>和<code>1,000</code>都可以接受。对于 4 位以上的数值，应添加千分号。</p><h2 id="货币"><a href="#货币" class="headerlink" title="货币"></a>货币</h2><p>货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Plain">$1,000<br>1,000 美元<br></code></pre></td></tr></table></figure><p>英文的货币名称，建议参考国际标准 <a href="https://en.wikipedia.org/wiki/ISO_4217">ISO 4217</a>。</p><h2 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h2><p>表示数值范围时，用波浪线（<code>～</code>）或一字线（<code>—</code>）连接。参见《标点符号》一节的“连接号”部分。</p><p>带有单位或百分号时，两个数字建议都要加上单位或百分号。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">132 kg～234 kg<br><br>67%～89%<br></code></pre></td></tr></table></figure><h2 id="变化程度的表示法"><a href="#变化程度的表示法" class="headerlink" title="变化程度的表示法"></a>变化程度的表示法</h2><p>数字的增加要使用“增加了”、“增加到”。“了”表示增量，“到”表示定量。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Plain">增加到过去的两倍<br>（过去为一，现在为二）<br><br>增加了两倍<br>（过去为一，现在为三）<br></code></pre></td></tr></table></figure><p>数字的减少要使用“降低了”、“降低到”。“了”表示增量，“到”表示定量。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Plain">降低到百分之八十<br>（定额是一百，现在是八十）<br><br>降低了百分之八十<br>（原来是一百，现在是二十）<br></code></pre></td></tr></table></figure><p>不能用“降低 N 倍”或“减少 N 倍”的表示法，要用“降低百分之几”或“减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/ruanyf/document-style-guide">中文技术文档的写作规范</a>，by 阮一峰</li></ul>]]></content>
    
    
    <categories>
      
      <category>写作标准</category>
      
    </categories>
    
    
    <tags>
      
      <tag>写作</tag>
      
      <tag>规范</tag>
      
      <tag>数值</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文本规范</title>
    <link href="/2023/02/23/writing-standard/text/"/>
    <url>/2023/02/23/writing-standard/text/</url>
    
    <content type="html"><![CDATA[<h2 id="字间距"><a href="#字间距" class="headerlink" title="字间距"></a>字间距</h2><p>（1）全角中文字符与半角英文字符之间，应有一个半角空格。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：本文介绍如何快速启动Windows系统。<br><br>正确：本文介绍如何快速启动 Windows 系统。<br></code></pre></td></tr></table></figure><p>（2）全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">正确：2011年5月15日，我订购了5台笔记本电脑与10台平板电脑。<br><br>正确：2011 年 5 月 15 日，我订购了 5 台笔记本电脑与 10 台平板电脑。<br></code></pre></td></tr></table></figure><p>半角的百分号，视同阿拉伯数字。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">正确：今年我国经济增长率是6.5%。<br><br>正确：今年我国经济增长率是 6.5%。<br></code></pre></td></tr></table></figure><p>（3）英文单位若不翻译，单位前的阿拉伯数字与单位符号之间，应留出适当的空隙。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例1：一部容量为 16 GB 的智能手机<br><br>例2：1 h = 60 min = 3,600 s<br></code></pre></td></tr></table></figure><p>（4）半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：他的电脑是 MacBook Air 。<br><br>正确：他的电脑是 MacBook Air。<br></code></pre></td></tr></table></figure><h2 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h2><p>（1）避免使用长句。</p><p>不包含任何标点符号的单个句子，或者以逗号分隔的句子构件，长度尽量保持在 20 个字以内；20～29 个字的句子，可以接受；30～39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，任何情况下都不能接受。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：本产品适用于从由一台服务器进行动作控制的单一节点结构到由多台服务器进行动作控制的并行处理程序结构等多种体系结构。<br><br>正确：本产品适用于多种体系结构。无论是由一台服务器（单一节点结构），还是由多台服务器（并行处理结构）进行动作控制，均可以使用本产品。<br></code></pre></td></tr></table></figure><p>逗号分割的长句，总长度不应该超过 100 字或者正文的 3 行。</p><p>（2）尽量使用简单句和并列句，避免使用复合句。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">并列句：他昨天生病了，没有参加会议。<br><br>复合句：那个昨天生病的人没有参加会议。<br></code></pre></td></tr></table></figure><p>（3）同样一个意思，尽量使用肯定句表达，不使用否定句表达。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：请确认没有接通装置的电源。<br><br>正确：请确认装置的电源已关闭。<br></code></pre></td></tr></table></figure><p>（4）避免使用双重否定句。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：没有删除权限的用户，不能删除此文件。<br><br>正确：用户必须拥有删除权限，才能删除此文件。<br></code></pre></td></tr></table></figure><h2 id="写作风格"><a href="#写作风格" class="headerlink" title="写作风格"></a>写作风格</h2><p>（1）尽量不使用被动语态，改为使用主动语态。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：假如此软件尚未被安装，<br><br>正确：假如尚未安装这个软件，<br></code></pre></td></tr></table></figure><p>（2）不使用非正式的语言风格。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：Lady Gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！<br><br>正确：无法参加本次活动，我深感遗憾。<br></code></pre></td></tr></table></figure><p>（3）不使用冷僻、生造或者文言文的词语，而要使用现代汉语的常用表达方式。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：这是唯二的快速启动的方法。<br><br>正确：这是仅有的两种快速启动的方法。<br></code></pre></td></tr></table></figure><p>（4）用对“的”、“地”、“得”。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Plain">她露出了开心的笑容。<br>（形容词＋的＋名词）<br><br>她开心地笑了。<br>（副词＋地＋动词）<br><br>她笑得很开心。<br>（动词＋得＋副词）<br></code></pre></td></tr></table></figure><p>（5）使用代词时（比如“其”、“该”、“此”、“这”等词），必须明确指代的内容，保证只有一个含义。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：从管理系统可以监视中继系统和受其直接控制的分配系统。<br><br>正确：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。<br></code></pre></td></tr></table></figure><p>（6）名词前不要使用过多的形容词。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。<br><br>正确：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。<br></code></pre></td></tr></table></figure><h2 id="英文处理"><a href="#英文处理" class="headerlink" title="英文处理"></a>英文处理</h2><p>（1）英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">英文：...information stored in random access memory (RAMs)...<br><br>中文：⋯⋯存储在随机存取存储器（RAM）里的信息⋯⋯<br></code></pre></td></tr></table></figure><p>（2）外文缩写可以使用半角圆点(<code>.</code>)表示缩写。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Plain">U.S.A.<br>Apple, Inc.<br></code></pre></td></tr></table></figure><p>（3）表示中文时，英文省略号（<code>...</code>）应改为中文省略号（<code>⋯⋯</code>）。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">英文：5 minutes later...<br><br>中文：5 分钟过去了⋯⋯<br></code></pre></td></tr></table></figure><p>（4）英文书名或电影名改用中文表达时，双引号应改为书名号。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">英文：He published an article entitled &quot;The Future of the Aviation&quot;.<br><br>中文：他发表了一篇名为《航空业的未来》的文章。<br></code></pre></td></tr></table></figure><p>（5）第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">IOC（International Olympic Committee，国际奥林匹克委员会）。这样定义后，便可以直接使用“IOC”了。<br></code></pre></td></tr></table></figure><p>（6）专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">“American Association of Physicists in Medicine”（美国医学物理学家协会）是专有名词，需要大写。<br><br>“online transaction processing”（在线事务处理）不是专有名词，不应大写。<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/ruanyf/document-style-guide">中文技术文档的写作规范</a>，by 阮一峰</li></ul>]]></content>
    
    
    <categories>
      
      <category>写作标准</category>
      
    </categories>
    
    
    <tags>
      
      <tag>写作</tag>
      
      <tag>规范</tag>
      
      <tag>文本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>段落规范</title>
    <link href="/2023/02/23/writing-standard/paragraph/"/>
    <url>/2023/02/23/writing-standard/paragraph/</url>
    
    <content type="html"><![CDATA[<h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><ul><li>一个段落只能有一个主题，或一个中心句子。</li><li>段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为中心句子服务。</li><li>一个段落的长度不能超过七行，最佳段落长度小于等于四行。</li><li>段落的句子语气要使用陈述和肯定语气，避免使用感叹语气。</li><li>段落之间使用一个空行隔开。</li><li>段落开头不要留出空白字符。</li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用第三方内容时，应注明出处。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">One man’s constant is another man’s variable. — Alan Perlis<br></code></pre></td></tr></table></figure><p>如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">本文转载自 WikiQuote<br></code></pre></td></tr></table></figure><p>使用外部图片时，必须在图片下方或文末标明来源。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">本文部分图片来自 Wikipedia<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/ruanyf/document-style-guide">中文技术文档的写作规范</a>，by 阮一峰</li></ul>]]></content>
    
    
    <categories>
      
      <category>写作标准</category>
      
    </categories>
    
    
    <tags>
      
      <tag>写作</tag>
      
      <tag>规范</tag>
      
      <tag>段落</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>标题规范</title>
    <link href="/2023/02/23/writing-standard/title/"/>
    <url>/2023/02/23/writing-standard/title/</url>
    
    <content type="html"><![CDATA[<h2 id="层级"><a href="#层级" class="headerlink" title="层级"></a>层级</h2><p>标题分为四级。</p><ul><li>一级标题：文章的标题</li><li>二级标题：文章主要部分的大标题</li><li>三级标题：二级标题下面一级的小标题</li><li>四级标题：三级标题下面某一方面的小标题</li></ul><p>下面是示例。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题</span><br><br><span class="hljs-section">## 二级标题</span><br><br><span class="hljs-section">### 三级标题</span><br><br><span class="hljs-section">#### 四级标题</span><br></code></pre></td></tr></table></figure><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><p>（1）一级标题下，不能直接出现三级标题。</p><p>示例：下面的文章结构，缺少二级标题。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题</span><br><br><span class="hljs-section">### 三级标题</span><br></code></pre></td></tr></table></figure><p>（2）标题要避免孤立编号（即同级标题只有一个）。</p><p>示例：下面的文章结构，<code>二级标题 A</code>只包含一个三级标题，完全可以省略<code>三级标题 A</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">## 二级标题 A</span><br><br><span class="hljs-section">### 三级标题 A</span><br><br><span class="hljs-section">## 二级标题 B</span><br></code></pre></td></tr></table></figure><p>（3）下级标题不重复上一级标题的名字。</p><p>示例：下面的文章结构，二级标题与下属的三级标题同名，建议避免。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">## 概述</span><br><br><span class="hljs-section">### 概述</span><br></code></pre></td></tr></table></figure><p>（4）谨慎使用四级标题，尽量避免出现，保持层级的简单，防止出现过于复杂的章节。</p><p>如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。</p><p>示例：下面的结构二要好于结构一。结构一适用的场景，主要是较长篇幅的内容。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs markdown">结构一<br><br><span class="hljs-section">### 三级标题</span><br><br><span class="hljs-section">#### 四级标题 A</span><br><br><span class="hljs-section">#### 四级标题 B</span><br><br><span class="hljs-section">#### 四级标题 C</span><br><br>结构二<br><br><span class="hljs-section">### 三级标题</span><br><br><span class="hljs-strong">**（1）A**</span><br><br><span class="hljs-strong">**（2）B**</span><br><br><span class="hljs-strong">**（3）C**</span><br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/ruanyf/document-style-guide">中文技术文档的写作规范</a>，by 阮一峰</li></ul>]]></content>
    
    
    <categories>
      
      <category>写作标准</category>
      
    </categories>
    
    
    <tags>
      
      <tag>写作</tag>
      
      <tag>规范</tag>
      
      <tag>标题</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
